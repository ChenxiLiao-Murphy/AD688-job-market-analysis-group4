{
  "hash": "845ce718d230b1600a93e174a2ad5e9f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Data Cleaning\"\nsubtitle: \"Data Preparation and Exploratory Insights for Geographic and Remote Work Trends\"\n\nbibliography: references.bib\ncsl: csl/econometrica.csl\nformat: \n  html:\n    toc: true\n    number-sections: true\n    df-print: paged\n---\n\n\n# Data Cleaning & Exploration\n\nThis page provides an overview of the data cleaning and initial exploration process for the job market dataset.\n\n_Content will be added here._\n\n\n\n\n## 1. Load Dataset\n\n::: {#fb456c87 .cell results='hide' execution_count=1}\n``` {.python .cell-code code-fold=\"true\"}\nimport pandas as pd\ndf1 = pd.read_csv(\"./data/lightcast_job_postings.csv\")\n```\n:::\n\n\n::: {#78257b08 .cell results='hide' execution_count=2}\n``` {.python .cell-code code-fold=\"true\"}\ndf1.head()\ndf1.info()\ndf1.describe()\n```\n:::\n\n\n##  Check Columns' Information \n\n::: {#9c35f0ca .cell results='hide' execution_count=3}\n``` {.python .cell-code code-fold=\"true\"}\ndf1.columns.tolist()\nprint(df1.columns.tolist())\n```\n:::\n\n\n##  Dropping Unnecessary Columns\n\n::: {#875d1f02 .cell results='hide' execution_count=4}\n``` {.python .cell-code code-fold=\"false\"}\n# Define columns that are irrelevant or redundant for our analysis\ncolumns_to_drop = [\n    # Tracking and metadata\n    \"ID\", \"LAST_UPDATED_DATE\", \"LAST_UPDATED_TIMESTAMP\", \"DUPLICATES\",\n    \"URL\", \"ACTIVE_URLS\", \"ACTIVE_SOURCES_INFO\", \"SOURCE_TYPES\", \"SOURCES\",\n\n    # Company raw info\n    \"COMPANY_RAW\", \"COMPANY_IS_STAFFING\",\n\n    # Raw or text-heavy fields\n    \"TITLE_RAW\", \"BODY\",\n\n    # Modeled / derived fields\n    \"MODELED_EXPIRED\", \"MODELED_DURATION\",\n\n    # Educational levels (redundant versions)\n    \"EDUCATION_LEVELS\", \"EDUCATION_LEVELS_NAME\",\n    \"MIN_EDULEVELS\", \"MIN_EDULEVELS_NAME\", \"MAX_EDULEVELS\",\n\n    # Redundant NAICS / SOC codes\n    \"NAICS_2022_2\", \"NAICS_2022_2_NAME\",\n    \"NAICS_2022_3\", \"NAICS_2022_3_NAME\",\n    \"SOC_2\", \"SOC_3\", \"SOC_5\"\n]\n\n# Drop columns, ignore if a column is missing\ndf1.drop(columns=columns_to_drop, inplace=True, errors=\"ignore\")\n\n# Display the first few rows to confirm\ndf1.head()\n```\n:::\n\n\n##  Handling Missing Values\n\n::: {#22a2b68d .cell results='hide' execution_count=5}\n``` {.python .cell-code code-fold=\"true\"}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nos.makedirs(\"figureswxw\", exist_ok=True)\n```\n:::\n\n\n::: {#555aa789 .cell execution_count=6}\n``` {.python .cell-code code-fold=\"true\"}\nimport missingno as msno\nimport matplotlib.pyplot as plt\nmsno.heatmap(df1)\n\nplt.title(\"Missing Values Heatmap\")\nplt.tight_layout()\nplt.savefig(\"figureswxw/missing_values_heatmap.png\", dpi=300)\nplt.show()\n```\n:::\n\n\n![](figureswxw/missing_values_heatmap.png){width=100% fig-align='center'}\n\n::: {#2036c6e0 .cell results='show' execution_count=7}\n``` {.python .cell-code code-fold=\"true\"}\n# Drop columns with >50% missing values\ndf1.dropna(axis=1, thresh=len(df1) * 0.5, inplace=True)\n\n\nif \"SALARY\" in df1.columns:\n    df1[\"SALARY\"] = df1[\"SALARY\"].fillna(df1[\"SALARY\"].median())\n\n    df1[\"DURATION\"] = df1[\"DURATION\"].fillna(df1[\"DURATION\"].median())\n\ncategorical_columns = [\"REMOTE_TYPE_NAME\", \"COMPANY_NAME\", \"MAX_EDULEVELS_NAME\"]\n\nfor col in categorical_columns:\n    if col in df1.columns:\n        df1[col] = df1[col].fillna(\"Unknown\")\n\n\ndf1.info()\n```\n:::\n\n\n##  Remove Duplicates\n\n::: {#32ea1cbd .cell results='hide' execution_count=8}\n``` {.python .cell-code code-fold=\"false\"}\ndf1.drop_duplicates(subset=[\"TITLE_CLEAN\", \"COMPANY_NAME\", \"CITY_NAME\", \"POSTED\"], inplace=True)\n\ndf1[\"REMOTE_TYPE_NAME\"].value_counts(dropna=False)\ndf1[\"EMPLOYMENT_TYPE_NAME\"].value_counts(dropna=False)\n```\n:::\n\n\n::: {#951c40bf .cell results='show' execution_count=9}\n``` {.python .cell-code code-fold=\"true\"}\n#improve\n\ndf1[\"EMPLOYMENT_TYPE_NAME\"] = df1[\"EMPLOYMENT_TYPE_NAME\"].replace({\n    \"Part-time (â‰¤ 32 hours)\": \"Part-time (≤ 32 hours)\",\n    \"Part-time / full-time\": \"Part-time / Full-time\"\n})\ndf1[\"EMPLOYMENT_TYPE_NAME\"] = df1[\"EMPLOYMENT_TYPE_NAME\"].fillna(\"Unknown\")\ndf1[\"EMPLOYMENT_TYPE_NAME\"].value_counts()\n```\n:::\n\n\n# Exploratory Data Analysis\n\n\n##   Remote Type distribution\n\n::: {#a24ae0e2 .cell lable='EDA' execution_count=10}\n``` {.python .cell-code code-fold=\"true\"}\nremote_counts = df1[\"REMOTE_TYPE_NAME\"].value_counts()\n\nplt.figure(figsize=(10,6))\nsns.barplot(\n    x=remote_counts.index, \n    y=remote_counts.values, \n    palette=\"Set2\"\n)\nplt.title(\"Remote Type Distribution\")\nplt.ylabel(\"Number of Job Postings\")\nplt.xlabel(\"Remote Type\")\nplt.grid(axis='y', linestyle='--', alpha=0.7)\nplt.tight_layout()\nplt.savefig(\"figureswxw/remote_type_distribution.png\", dpi=300)\nplt.show()\n```\n:::\n\n\n![](figureswxw/remote_type_distribution.png){width=100% fig-align='center'}\n\n::: {#bd767f4a .cell results='hide' execution_count=11}\n``` {.python .cell-code code-fold=\"true\"}\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf1[\"IS_AI\"] = df1[\"NAICS_2022_6_NAME\"].fillna(\"\").str.contains(\"AI|Artificial Intelligence\", case=False) | \\\n               df1[\"LOT_OCCUPATION\"].fillna(\"\").str.contains(\"AI|Artificial Intelligence\", case=False)\n\ndf1[\"IS_AI\"] = df1[\"IS_AI\"].map({True: \"AI\", False: \"Non-AI\"})\n\n```\n:::\n\n\n##  Top 10 states : AI vs Non-AI Job Postings\n\n::: {#753f88f7 .cell execution_count=12}\n``` {.python .cell-code code-fold=\"true\"}\ntop_states = df1[\"STATE_NAME\"].value_counts().head(10).index\ndf_top_states = df1[df1[\"STATE_NAME\"].isin(top_states)]\n\npivot_states = df_top_states.groupby([\"STATE_NAME\", \"IS_AI\"]).size().unstack(fill_value=0)\n\npivot_states.plot(kind=\"bar\", stacked=True, figsize=(12,6), colormap=\"Set3\")\nplt.title(\"Top 10 States: AI vs Non-AI Job Postings\")\nplt.ylabel(\"Number of Job Postings\")\nplt.xlabel(\"State\")\nplt.xticks(rotation=30)\nplt.grid(axis='y', linestyle='--', alpha=0.7)\nplt.tight_layout()\nplt.savefig(\"figureswxw/top_states_ai_nonai.png\", dpi=300)\nplt.show()\n```\n:::\n\n\n![](figureswxw/top_states_ai_nonai.png){width=100% fig-align='center'}\n\n\n\n##  Top 10 cities: AI vs Non-AI Job Postings \n\n::: {#063ab8ec .cell execution_count=13}\n``` {.python .cell-code code-fold=\"true\"}\ntop_cities = df1[\"CITY_NAME\"].value_counts().head(10).index\ndf_top_cities = df1[df1[\"CITY_NAME\"].isin(top_cities)]\n\npivot_cities = df_top_cities.groupby([\"CITY_NAME\", \"IS_AI\"]).size().unstack(fill_value=0)\n\npivot_cities.plot(kind=\"bar\", stacked=True, figsize=(12,6), colormap=\"Set1\")\nplt.title(\"Top 10 Cities: AI vs Non-AI Job Postings\")\nplt.ylabel(\"Number of Job Postings\")\nplt.xlabel(\"City\")\nplt.xticks(rotation=30)\nplt.grid(axis='y', linestyle='--', alpha=0.7)\nplt.tight_layout()\nplt.savefig(\"figureswxw/top_cities_ai_nonai.png\", dpi=300)\nplt.show()\n```\n:::\n\n\n![](figureswxw/top_cities_ai_nonai.png){width=100% fig-align='center'}\n\n\n##  Time Trend of Remote Work Types\n\n::: {#57abd4ec .cell execution_count=14}\n``` {.python .cell-code code-fold=\"true\"}\nif \"POSTED\" in df1.columns:\n    df1[\"POSTED_DATE\"] = pd.to_datetime(df1[\"POSTED\"], errors='coerce')\n    df1 = df1.dropna(subset=[\"POSTED_DATE\"])\n    df1[\"POSTED_MONTH\"] = df1[\"POSTED_DATE\"].dt.to_period(\"M\")\n    \n    trend = df1.groupby([\"POSTED_MONTH\", \"REMOTE_TYPE_NAME\"]).size().unstack(fill_value=0)\n    \n    trend.plot(figsize=(14,7))\n    plt.title(\"Remote Work Trends Over Time\", fontsize=14)\n    plt.ylabel(\"Number of Job Postings\")\n    plt.xlabel(\"Month\")\n    plt.grid(axis='y', linestyle='--', alpha=0.7)\n    plt.tight_layout()\n    plt.savefig(\"figureswxw/remote_trend_over_time.png\", dpi=300)\n    plt.show()\nelse:\n    print(\"POSTED column not found in dataset.\")\n```\n:::\n\n\n![](figureswxw/remote_trend_over_time.png){width=100% fig-align='center'}\n\n\n\n##  Tech Hubs vs Other Locations Hiring Trends  \n\n::: {#9f1315c3 .cell execution_count=15}\n``` {.python .cell-code code-fold=\"true\"}\ndf1[\"IS_HUB\"] = df1[\"CITY_NAME\"].apply(lambda x: \"Hub\" if x in [\"San Francisco\", \"Austin\", \"Boston\"] else \"Other\")\n\npivot_hub = df1.groupby([\"POSTED_MONTH\", \"IS_HUB\"]).size().unstack(fill_value=0)\n\npivot_hub.plot(figsize=(14,7))\nplt.title(\"Hiring Trends: Tech Hubs vs Other Locations\")\nplt.ylabel(\"Number of Job Postings\")\nplt.xlabel(\"Month\")\nplt.grid(axis='y', linestyle='--', alpha=0.7)\nplt.tight_layout()\nplt.savefig(\"figureswxw/techhub_vs_other_trend.png\", dpi=300)\nplt.show()\n```\n:::\n\n\n![](figureswxw/techhub_vs_other_trend.png){width=100% fig-align='center'}\n\n\n\n\n##  Remote Job Trend by Industry \n\n::: {#3b22f4bc .cell execution_count=16}\n``` {.python .cell-code code-fold=\"true\"}\ntop_industries = (\n    df1.groupby(\"NAICS_2022_6_NAME\").size()\n    .sort_values(ascending=False)\n    .head(10)\n    .index\n)\n\n\ndf_top_ind = df1[df1[\"NAICS_2022_6_NAME\"].isin(top_industries)]\n\n\ndf_top_ind[\"POSTED_DATE\"] = pd.to_datetime(df_top_ind[\"POSTED\"], errors='coerce')\ndf_top_ind = df_top_ind.dropna(subset=[\"POSTED_DATE\"])\ndf_top_ind[\"POSTED_MONTH\"] = df_top_ind[\"POSTED_DATE\"].dt.to_period(\"M\")\n\n\npivot = df_top_ind.groupby([\"POSTED_MONTH\", \"NAICS_2022_6_NAME\"]).size().unstack(fill_value=0)\n\npivot.plot(figsize=(14,7))\nplt.title(\"Remote Job Trends by Top 5 Industries Over Time\", fontsize=14)\nplt.ylabel(\"Number of Job Postings\")\nplt.xlabel(\"Month\")\nplt.grid(axis='y', linestyle='--', alpha=0.7)\nplt.legend(\n    title=\"NAICS_2022_6_NAME\",\n    loc='upper center',\n    bbox_to_anchor=(0.5, -0.15),  \n    ncol=2,                       \n    frameon=False\n)\nplt.tight_layout()\nplt.savefig(\"figureswxw/remote_trend_top5_industry.png\", dpi=300)\nplt.show()\n\n```\n:::\n\n\n![](figureswxw/remote_trend_top5_industry.png){width=100% fig-align='center'}\n\n\n\n## Urban/Rural Region: AI vs Non-AI Job Postings\n\n::: {#90ad3f29 .cell results='show' execution_count=17}\n``` {.python .cell-code code-fold=\"true\"}\nurban_cities = [\n    \"New York\", \"Los Angeles\", \"Chicago\", \"Houston\", \"San Francisco\",\n    \"Austin\", \"Boston\", \"Dallas\", \"Seattle\", \"Washington\", \"Atlanta\"\n]\n\ndf1[\"CITY_NAME_CLEAN\"] = df1[\"CITY_NAME\"].str.split(\",\").str[0].str.strip().str.title()\n\ndf1[\"Urban_Rural\"] = df1[\"CITY_NAME_CLEAN\"].apply(\n    lambda x: \"Urban\" if x in urban_cities else \"Rural\"\n)\n\nprint(df1[\"Urban_Rural\"].value_counts())\n```\n:::\n\n\n::: {#4c53a62b .cell execution_count=18}\n``` {.python .cell-code code-fold=\"true\"}\nrequired_columns = [\"Urban_Rural\", \"IS_AI\"]\nmissing_columns = [col for col in required_columns if col not in df1.columns]\n\nif not missing_columns:\n\n    pivot_urban = df1.groupby([\"Urban_Rural\", \"IS_AI\"]).size().unstack(fill_value=0)\n\n    for region in pivot_urban.index:\n        data = pivot_urban.loc[region]\n        plt.figure(figsize=(6,6))\n        plt.pie(\n            data,\n            labels=data.index,\n            autopct='%1.1f%%',\n            startangle=90,\n            colors=[\"#ff9999\",\"#66b3ff\"],\n            wedgeprops={'edgecolor': 'black'}\n        )\n        plt.title(f\"{region} - AI vs Non-AI Job Postings\")\n        plt.tight_layout()\n        fname = f\"figureswxw/{region.lower()}_ai_nonai_pie.png\"\n        plt.savefig(fname, dpi=300)\n        plt.show()\n        print(f\"Chart saved as {fname}\")\nelse:\n    print(f\"The following required columns are missing: {missing_columns}. Please check your dataset.\")\n```\n:::\n\n\n![](figureswxw/urban_ai_nonai_pie.png){width=100% fig-align='center' fig-cap=\"Urban Area: AI vs Non-AI Job Postings\"}\n\n![](figureswxw/rural_ai_nonai_pie.png){width=100% fig-align='center' fig-cap=\"Rural Area: AI vs Non-AI Job Postings\"}\n\n",
    "supporting": [
      "data_cleaning_files"
    ],
    "filters": [],
    "includes": {}
  }
}