[
  {
    "objectID": "skill_gap_analysis.html",
    "href": "skill_gap_analysis.html",
    "title": "Skill Gap Analysis",
    "section": "",
    "text": "This section presents the skill gap analysis between job requirements and available workforce skills."
  },
  {
    "objectID": "skill_gap_analysis.html#team-members-current-skill-levels",
    "href": "skill_gap_analysis.html#team-members-current-skill-levels",
    "title": "Skill Gap Analysis",
    "section": "1.1 Team Members’ Current Skill Levels",
    "text": "1.1 Team Members’ Current Skill Levels\n\nskills_data = {\n    \"Name\": [\"Eugenia\", \"Chenxi\", \"Xiangwen\"],\n    \"Python\": [3, 3, 5],\n    \"SQL\": [4, 2, 3],\n    \"Machine Learning\": [1, 2, 4],\n    \"Cloud Computing\": [3, 1, 2],\n    \"AWS\": [2, 4, 3],\n    \"Docker\": [2,2,2]\n}\n\n\ndf_skills = pd.DataFrame(skills_data)\ndf_skills.set_index(\"Name\", inplace=True)\ndf_skills\n\nThe table below contains self-assessed skill scores provided by each team member across seven key technical areas: Python；SQL ；Machine Learning ；Cloud Computing ；AWS；Docker. Each score reflects the individual’s current proficiency on a scale from 1 to 5.\nEach team member rated their own proficiency in these 6 tech skills. These self-assessments allow the team to identify strengths, weaknesses, and areas for upskilling.\nThe “Docker” skill area, in particular, deserves clarification. Although it is labeled as “Docker,” the term here is used broadly. It covers foundational and practical knowledge in containerization technologies—not limited strictly to Docker itself. Skills such as writing Dockerfiles, managing containers, using images, and deploying containers on cloud-native services like AWS ECS or Kubernetes all fall under this category. Consequently, coursework or experience that didn’t explicitly use the word “Docker” but involved equivalent technologies was still treated as contributing to this category."
  },
  {
    "objectID": "skill_gap_analysis.html#current-skill-heatmap",
    "href": "skill_gap_analysis.html#current-skill-heatmap",
    "title": "Skill Gap Analysis",
    "section": "1.2 Current Skill Heatmap",
    "text": "1.2 Current Skill Heatmap\n\n\nCode\nplt.figure(figsize=(10, 6))\nsns.heatmap(df_skills, annot=True, cmap=\"coolwarm\", linewidths=0.5)\nplt.xlabel(\"Technical Skills\", fontsize=14)       \nplt.ylabel(\"Team Members\", fontsize=14) \nplt.xticks(rotation=30)  \nplt.title(\"Team Skill Levels Heatmap\")\nplt.tight_layout()\nplt.savefig(\"figurestyj/team_skill_heatmap.png\", dpi=300,  bbox_inches='tight')\nplt.show()\n\n\n\n\n\n\n\nOverall, the heatmap shows that our team demonstrates a moderately balanced technical profile, though notable disparities highlight areas for potential growth.\nPython emerges as the strongest skill across the team, with all members scoring at or above intermediate levels. This indicates a solid foundation in programming, which is essential for data analysis, automation, and model development. In contrast, Cloud Computing and Machine Learning show lower average scores, pointing to critical skill gaps that may hinder the team’s readiness for cloud-based or AI-driven projects.\nIndividual performance patterns further refine this picture. Xiangwen displays consistent strength across all categories, positioning him as a reliable contributor in both software and infrastructure tasks. Eugenia shows a clear specialization in SQL, which aligns well with database querying and data wrangling tasks. Meanwhile, Chenxi demonstrates particular strength in AWS, suggesting familiarity with cloud deployment tools.\nThese observations suggest that while the team has core technical capabilities in place, targeted upskilling in Cloud and Machine Learning could significantly enhance overall competency."
  },
  {
    "objectID": "skill_gap_analysis.html#personalized-upskilling-recommendations",
    "href": "skill_gap_analysis.html#personalized-upskilling-recommendations",
    "title": "Skill Gap Analysis",
    "section": "1.3 Personalized Upskilling Recommendations",
    "text": "1.3 Personalized Upskilling Recommendations\nTo address the observed skill gaps, the team should implement a structured upskilling strategy focusing on Cloud Computing and Machine Learning. First, team members can enroll in targeted online certification programs such as AWS Certified Cloud Practitioner, which provide foundational knowledge in cloud infrastructure, deployment, and security. These platforms often include hands-on labs, allowing members to apply concepts in real-world scenarios.\nFor Machine Learning, it is recommended that the team engage with project-based learning resources (e.g., Coursera’s “Applied Machine Learning” or fast.ai), which emphasize practical model development using Python libraries like scikit-learn and TensorFlow. Additionally, collaborative mini-projects—such as building small-scale predictive models or experimenting with cloud-based ML tools—can reinforce learning through application.\nBy following these strategies, the team can elevate its technical capacity, meet evolving job market demands, and position itself for success in AI-driven and cloud-enabled environments."
  },
  {
    "objectID": "skill_gap_analysis.html#compute-average-team-skills-vs-industry-expectations",
    "href": "skill_gap_analysis.html#compute-average-team-skills-vs-industry-expectations",
    "title": "Skill Gap Analysis",
    "section": "2.1 Compute Average Team Skills vs Industry Expectations",
    "text": "2.1 Compute Average Team Skills vs Industry Expectations\n\n\nCode\ntop_skills = [\"Python\", \"SQL\", \"Machine Learning\", \"Cloud Computing\", \"Docker\", \"AWS\"]\njob_skill_counts = Counter(top_skills)\n\nfor skill in top_skills:\n    if skill not in df_skills.columns:\n        df_skills[skill] = 0  # Assume no knowledge in missing skills\n\ndf_skills\n\n\nos.makedirs(\"figurestyj\", exist_ok=True)\n\nteam_avg_skills = df_skills.mean()\n\nskills_to_plot = []\nfor skill in top_skills:\n    score = team_avg_skills[skill] if skill in team_avg_skills else 0\n    skills_to_plot.append(score)\n\nplt.figure(figsize=(10, 5))\nplt.bar(top_skills, skills_to_plot, color=\"skyblue\")\nplt.title(\"Average Team Skill Levels vs Top Skills\")\nplt.xlabel(\"Technical Skills\", fontsize=14)  \nplt.ylabel(\"Average Score\",fontsize=14 )\nplt.xticks(rotation=45)\nplt.grid(axis='y', linestyle='--', alpha=0.7)\nplt.tight_layout()\nplt.savefig(\"figurestyj/team_vs_industry_skills.png\", dpi=300,  bbox_inches='tight')\nplt.show()\n\n\n\n\n\n\n\nThe bar chart illustrates the team’s average proficiency across six essential technical competencies, offering insights into current capabilities and potential development areas. Python ranks as the team’s strongest skill, with an average score exceeding 3.5. This reflects a robust foundation in programming across the group, which supports core functions such as data processing, automation, and algorithm development—an alignment consistent with modern analytics expectations (Salas et al. (2015)).\nSQL and AWS follow closely with average scores of 3.0, indicating moderate proficiency in database querying and cloud infrastructure. These skills are increasingly critical for managing large-scale data pipelines and deploying solutions on scalable platforms, particularly in cloud-first environments (Shuffler et al. (2015)).\nBy contrast, the team exhibits lower proficiency in Machine Learning, Cloud Computing, and Docker, each with average scores ranging between 2.0 and 2.3. These areas represent skill gaps that may limit the team’s ability to implement and operationalize advanced analytics models or containerized applications. Given industry-wide demand for cloud-native and AI-integrated solutions, targeted upskilling in these domains would significantly enhance the team’s readiness for high-impact roles (Shuffler et al. (2015)).\nTherefore, this distribution suggests a need for strategic skill investment. According to Salas et al. (2015) (Salas et al. (2015)), leveraging individual strengths while addressing group-level deficiencies is essential for building cohesive and adaptable teams in complex, knowledge-driven environments. Focusing development efforts on underrepresented but industry-critical areas such as cloud platforms and machine learning will bridge internal capability gaps while aligning with current job market expectations."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AD688 Summer25 Group Project - Job Market Analysis - Group 4",
    "section": "",
    "text": "Welcome\nThis project analyzes recent trends in job market geography, remote work, and AI-related employment across the United States.\nIt is part of the AD688 Summer 2025 Group Project conducted by Group 4.\n\n\nTable of Contents\nExplore the following sections:\n\nAbout the Project\nIntroduction & Motivation\nData Cleaning & EDA\nEnhanced EDA (Geographic Focus)\nSkill Gap Analysis\nNLP Methods\nMachine Learning Analysis"
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "The rise of remote work, accelerated by the COVID-19 pandemic, has significantly reshaped the labour market and job geography in the United States and beyond. This shift has introduced new dynamics in how and where work is performed, with important implications for job accessibility, regional economies, and employment equity ( Hansen et al. (2023)). Geographic patterns now play a key role in determining access to job opportunities. Remote work adoption has been uneven across industries and cities, presenting both challenges and opportunities for regional development.\nAt the same time, the growth of artificial intelligence (AI) is changing the types of jobs that are available. AI-related jobs may either cluster in a few established tech hubs, such as Boston, New York City, and Los Angeles, or spread more evenly across regions, influencing regional economic balance (Hsu & Tambe (2024)). These trends could either reinforce or reduce geographic inequalities. Understanding these shifts is essential, as they affect job seekers’ decisions, employer location strategies, and regional economic resilience.\nThe year 2024 represents a critical moment in these developments. Hybrid work has become more common, and some companies are encouraging employees to return to the office (Tahlyan et al. (2024)). At the same time, new tech hubs are emerging outside of traditional centers like Silicon Valley. These emerging hubs may offer fresh opportunities for regions that have not been tech leaders in the past (Tan et al. (2023)). Remote work trends and the decentralisation of AI-related and other high-skill jobs could reshape the distribution of employment and economic activity.\nThis project aims to analyze geographic variations in AI and non-AI job growth, the prevalence of remote work across locations, and the evolving role of traditional and emerging tech hubs in the 2024 labor market. We expect to identify leading metropolitan statistical areas (MSAs) for both AI and non-AI jobs, assess whether remote work opportunities are continuing to expand or plateau, and determine if job growth is becoming more geographically dispersed or remains concentrated. These findings will help job seekers and employers make informed decisions on where to focus their efforts, based on the changing interplay of AI adoption, remote work, and regional economic trends (Zheng et al. (2024)).\n\n\n\n\nReferences\n\nHansen, S., Lambert, P., Bloom, N., Davis, S. J., Sadun, R., & Taska, B. (2023). Remote work across jobs, companies, and space. SSRN Electronic Journal. https://doi.org/10.2139/ssrn.4380734\n\n\nHsu, D. H., & Tambe, P. (2024). Remote work and job applicant diversity: Evidence from technology startups. Management Science. https://doi.org/10.1287/mnsc.2022.03391\n\n\nTahlyan, D., Mahmassani, H., Stathopoulos, A., Said, M., Shaheen, S. A., Walker, J., & Johnson, B. (2024). In-person, hybrid or remote? Employers’ perspectives on the future of work post-pandemic. Transportation Research Part A: Policy and Practice. https://doi.org/10.1016/j.tra.2024.104273\n\n\nTan, S., Fang, K., & Lester, T. (2023). Post-pandemic travel patterns of remote tech workers. Transportation Research Interdisciplinary Perspectives, 19, 100804. https://doi.org/10.1016/j.trip.2023.100804\n\n\nZheng, Y., Wang, S., Liu, L., Aloisi, J., & Zhao, J. (2024). Impacts of remote work on vehicle miles traveled and transit ridership in the USA. Nature Cities. https://doi.org/10.1038/s44284-024-00057-1"
  },
  {
    "objectID": "nlp_methods.html",
    "href": "nlp_methods.html",
    "title": "NLP Methods",
    "section": "",
    "text": "This section uses natural language processing (NLP) to extract insights from job descriptions in the dataset, focusing on the most frequent skills and terms mentioned. We apply TF-IDF to identify distinguishing keywords, and generate a word cloud for intuitive visualization.\n\n1 Load and Preprocess Text Data\n\n\nCode\nimport pandas as pd\nimport re\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n\n\nCode\ndf = pd.read_csv(\"data/lightcast_job_postings.csv\", encoding=\"utf-8\", on_bad_lines='skip')\n\n\n\n\nCode\njob_desc = df[\"BODY\"].dropna().astype(str)\n\n\ndef clean_text(text):\n    text = text.lower()\n    text = re.sub(r'\\d+', '', text)\n    text = re.sub(r'[^\\w\\s]', '', text)\n    return text\n\njob_desc_clean = job_desc.apply(clean_text)\n\n\nThe above steps load job description text from the BODY field and apply basic text preprocessing. This includes lowercasing, removal of numbers and special characters, which helps standardize the input for downstream natural language processing tasks such as TF-IDF vectorization or topic modeling.\n\n\n2 TF-IDF Analysis: Top Keywords\n\n\nCode\ntfidf = TfidfVectorizer(max_features=30, stop_words=\"english\")\ntfidf_matrix = tfidf.fit_transform(job_desc_clean)\n\nfeature_names = tfidf.get_feature_names_out()\nscores = tfidf_matrix.sum(axis=0).A1\n\ntfidf_df = pd.DataFrame({\"Term\": feature_names, \"Score\": scores})\ntfidf_df = tfidf_df.sort_values(by=\"Score\", ascending=False)\ntfidf_df.head(10)\n\n\n\n\nCode\nplt.figure(figsize=(14, 7))\nsns.barplot(data=tfidf_df.head(15), x=\"Score\", y=\"Term\", palette=\"viridis\")\nplt.title(\"Top TF-IDF Keywords in Job Descriptions\")\nplt.grid(axis='x', linestyle='--', alpha=0.7)\nplt.tight_layout()\nplt.savefig(\"figurestyj/tfidf_keywords.png\", dpi=300,  bbox_inches='tight')\nplt.show()\n\n\n\n\n\n\n\nThe bar chart presents the 15 most prominent terms extracted through Term Frequency–Inverse Document Frequency (TF-IDF), a widely used technique in Natural Language Processing (NLP) for identifying important keywords in a collection of documents. In this case, the documents are job descriptions from the Lightcast dataset.\nAmong the top-ranked terms, “data” stands out as the most significant, followed by “experience”, “business”, and “job”. These results highlight the central role of data-centric roles in the job market and emphasize the importance of relevant professional experience. Keywords such as “skills”, “SAP”, and “management” also appear frequently, suggesting that employers value proficiency in technical tools, leadership ability, and demonstrable skillsets.\nThis distribution reveals several important trends:\n\nData proficiency is a core requirement across many industries, confirming the market’s increasing demand for data-literate professionals.\nExperience and business understanding are consistently prioritized, reinforcing the need for candidates to demonstrate both domain knowledge and practical work exposure.\nSoft and functional skills—such as teamwork, communication, and technical support—remain critical, as shown by the inclusion of terms like “team”, “support”, and “solutions”.\n\nOverall, the TF-IDF analysis provides useful insights into the real-world competencies most frequently emphasized by employers. These findings can inform job seekers on how to tailor their resumes and guide educators or training programs in designing relevant upskilling content.\n\n\n3 Word Cloud Visualization\n\n\nCode\nfrom wordcloud import WordCloud\n\ntext_blob = \" \".join(job_desc_clean.tolist())\n\nwordcloud = WordCloud(width=1000, height=400, background_color=\"white\", max_words=100).generate(text_blob)\n\n\n\n\nCode\nplt.figure(figsize=(14, 7))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.title(\"Word Cloud of Job Description Terms\")\nplt.tight_layout()\nplt.savefig(\"figurestyj/jobdesc_wordcloud.png\", dpi=300)\nplt.show()\n\n\n\nIn addition to the TF-IDF results, the word cloud visualization further enriches our understanding by emphasizing the recurring presence of phrases such as “bachelors degree”, “data analyst”, “support”, and “ability”. This aligns with expectations that many job postings include educational qualifications and role-specific technical terms. Moreover, the word cloud captures compliance-related language such as “gender identity”, “sexual orientation”, and “national origin”. These terms are commonly found in equal opportunity employment disclosures and reflect widespread adherence to diversity and inclusion standards in job advertisements.\n\n\n4 Conclusion\nCollectively, the TF-IDF scores and the word cloud suggest several dominant themes within job descriptions. First, there is a consistent emphasis on technical qualifications, including skills in data analysis, cloud platforms, and tools such as Python and SAP. Second, postings frequently reference soft skills such as management, communication, and teamwork. Third, many job ads incorporate legal or standardized phrasing associated with hiring equity and regulatory compliance. Lastly, there is a strong focus on candidates’ educational background and accumulated experience.\nThese findings provide actionable guidance for job seekers, especially those pursuing roles in AI, tech, or data-related fields. Individuals are encouraged to showcase both technical expertise and interpersonal effectiveness in their resumes. Additionally, familiarity with standardized workplace language and professional communication expectations may enhance alignment with employer requirements."
  },
  {
    "objectID": "ml_analysis.html",
    "href": "ml_analysis.html",
    "title": "Modeling & Analysis",
    "section": "",
    "text": "This section presents our machine learning models to analyze geographic and remote work patterns in the 2024 U.S. job market. We apply both unsupervised and supervised learning methods to gain insights into how job locations and remote types impact salaries and job classifications."
  },
  {
    "objectID": "ml_analysis.html#supervised-learning-classification-predict-remote-type",
    "href": "ml_analysis.html#supervised-learning-classification-predict-remote-type",
    "title": "Modeling & Analysis",
    "section": "2.1 Supervised Learning: Classification – Predict Remote Type",
    "text": "2.1 Supervised Learning: Classification – Predict Remote Type\nTo understand what factors influence whether a job is remote, hybrid, or on-site, we trained a Random Forest Classifier using three features: STATE_NAME (location), SOC_2021_4 (job category), and MAX_YEARS_EXPERIENCE (seniority level).The model’s performance is summarized in a confusion matrix, which shows how accurately it distinguishes between different types of remote work arrangements.\n\n\nCode\n# Import libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Prepare dataset\ndf_class = df[['STATE_NAME', 'SOC_2021_4', 'MAX_YEARS_EXPERIENCE', 'REMOTE_TYPE_NAME']].dropna()\ndf_class_encoded = pd.get_dummies(df_class, columns=['STATE_NAME', 'SOC_2021_4'])\n\nX = df_class_encoded.drop('REMOTE_TYPE_NAME', axis=1)\ny = df_class['REMOTE_TYPE_NAME']\n\n# Train/test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Train classifier\nclf = RandomForestClassifier(random_state=42)\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\n\n# Print performance\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\n\n\n# Visualize confusion matrix\nplt.figure(figsize=(14,8))\nsns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues')\nplt.title(\"Confusion Matrix - Remote Work Type Classifier\")\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.tight_layout()\n\n# Save\nplt.savefig(\"figuresmurphy/confusion_matrix_remote_type.png\", dpi=300)\nplt.show()\n\n\n\n\n\n\n\nThe model accurately predicts class 3, but often misclassifies classes 0, 1, and 2 as 3, showing a bias toward the most common remote type. Job seekers should clearly state remote preferences, as nuanced roles may be missed by automated systems."
  },
  {
    "objectID": "ml_analysis.html#supervised-learning-regression-predict-salary",
    "href": "ml_analysis.html#supervised-learning-regression-predict-salary",
    "title": "Modeling & Analysis",
    "section": "2.2 Supervised Learning: Regression – Predict Salary",
    "text": "2.2 Supervised Learning: Regression – Predict Salary\nWe applied a Random Forest Regressor to estimate average salary using location, experience, remote type, and job category. The model captures complex patterns, highlighting how these factors shape compensation.\n\n\nCode\n# Step 1: Create AVERAGE_SALARY if not already in df\ndf['SALARY_FROM'] = pd.to_numeric(df['SALARY_FROM'], errors='coerce')\ndf['SALARY_TO'] = pd.to_numeric(df['SALARY_TO'], errors='coerce')\ndf['AVERAGE_SALARY'] = (df['SALARY_FROM'] + df['SALARY_TO']) / 2\n\n# Step 2: Drop rows with missing values in key columns\ndf_reg = df[['STATE_NAME', 'SOC_2021_4', 'REMOTE_TYPE_NAME', 'MAX_YEARS_EXPERIENCE', 'AVERAGE_SALARY']].dropna()\n\n# Step 3: One-hot encoding\ndf_reg_encoded = pd.get_dummies(df_reg, columns=['STATE_NAME', 'SOC_2021_4', 'REMOTE_TYPE_NAME'])\n\n# Step 4: Split X and y\nX = df_reg_encoded.drop('AVERAGE_SALARY', axis=1)\ny = df_reg_encoded['AVERAGE_SALARY']\n\n# Step 5: Train/test split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Step 6: Train Random Forest Regressor\nfrom sklearn.ensemble import RandomForestRegressor\n\nmodel = RandomForestRegressor(random_state=42)\nmodel.fit(X_train, y_train)\n\n# Step 7: Predict\ny_pred = model.predict(X_test)\n\n# Step 8: Evaluate\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n\nprint(\"Mean Squared Error:\", mean_squared_error(y_test, y_pred))\nprint(\"Mean Absolute Error:\", mean_absolute_error(y_test, y_pred))\nprint(\"R2 Score:\", r2_score(y_test, y_pred))\n\n\nplt.figure(figsize=(14, 8))\nplt.scatter(y_test, y_pred, alpha=0.5)\nplt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')\nplt.xlabel(\"Actual Salary\")\nplt.ylabel(\"Predicted Salary\")\nplt.title(\"Actual vs Predicted Salary\")\nplt.grid(True, linestyle='--', linewidth=0.5, color='gray') \nplt.tight_layout()\nplt.savefig(\"figuresmurphy/actual_vs_predicted_salary.png\", dpi=300)\nplt.show()\n\n\n\n\n\n\n\nThe plot shows a strong alignment between predicted and actual salaries, with most points near the red dashed line—indicating good model performance. Some deviations, especially in higher salary ranges, reflect the difficulty of predicting roles with greater variability in seniority and industry."
  },
  {
    "objectID": "ml_analysis.html#which-states-are-more-inclined-to-offer-remotehybridonsite-jobs",
    "href": "ml_analysis.html#which-states-are-more-inclined-to-offer-remotehybridonsite-jobs",
    "title": "Modeling & Analysis",
    "section": "2.3 Which states are more inclined to offer Remote/Hybrid/Onsite jobs?",
    "text": "2.3 Which states are more inclined to offer Remote/Hybrid/Onsite jobs?\n\n\nCode\nimport matplotlib.pyplot as plt\n\ndf_geo = df[['STATE_NAME', 'REMOTE_TYPE_NAME']].dropna()\n\n\nstate_remote_counts = pd.crosstab(df_geo['STATE_NAME'], df_geo['REMOTE_TYPE_NAME'])\n\n# visualization\nstate_remote_counts.plot(kind='bar', stacked=True, figsize=(14,7))\nplt.title(\"Remote Work Type Distribution by State\")\nplt.xlabel(\"State\", fontsize=8)\nplt.xticks(rotation=45, ha='right')\nplt.grid(True, linestyle='--', linewidth=0.5, color='gray') \nplt.ylabel(\"Number of Job Postings\")\nplt.tight_layout()\n\nplt.savefig(\"figuresmurphy/remote_type_by_state.png\", dpi=300)\nplt.show()\n\n\n\n\n\nRemote Work Type by State\n\n\nThe bar chart shows that states like California, New York, and Texas have a high volume of job postings across all remote types. Remote roles are especially common in tech-focused states like California and Washington, while on-site jobs are more prevalent in states with stronger manufacturing industries."
  },
  {
    "objectID": "ml_analysis.html#map-based-visualizations",
    "href": "ml_analysis.html#map-based-visualizations",
    "title": "Modeling & Analysis",
    "section": "3.1 Map-based visualizations",
    "text": "3.1 Map-based visualizations\nWe used a choropleth map to visually represent the percentage of remote jobs per state. This spatial analysis can guide job seekers toward states with more flexible work environments.\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\nimport pandas as pd\nimport plotly.express as px\n\n# 1. Create a full name -&gt; abbreviation mapping table\nstate_abbrev_map = {\n    'Alabama': 'AL', 'Alaska': 'AK', 'Arizona': 'AZ', 'Arkansas': 'AR', 'California': 'CA',\n    'Colorado': 'CO', 'Connecticut': 'CT', 'Delaware': 'DE', 'Florida': 'FL', 'Georgia': 'GA',\n    'Hawaii': 'HI', 'Idaho': 'ID', 'Illinois': 'IL', 'Indiana': 'IN', 'Iowa': 'IA',\n    'Kansas': 'KS', 'Kentucky': 'KY', 'Louisiana': 'LA', 'Maine': 'ME', 'Maryland': 'MD',\n    'Massachusetts': 'MA', 'Michigan': 'MI', 'Minnesota': 'MN', 'Mississippi': 'MS',\n    'Missouri': 'MO', 'Montana': 'MT', 'Nebraska': 'NE', 'Nevada': 'NV', 'New Hampshire': 'NH',\n    'New Jersey': 'NJ', 'New Mexico': 'NM', 'New York': 'NY', 'North Carolina': 'NC',\n    'North Dakota': 'ND', 'Ohio': 'OH', 'Oklahoma': 'OK', 'Oregon': 'OR', 'Pennsylvania': 'PA',\n    'Rhode Island': 'RI', 'South Carolina': 'SC', 'South Dakota': 'SD', 'Tennessee': 'TN',\n    'Texas': 'TX', 'Utah': 'UT', 'Vermont': 'VT', 'Virginia': 'VA', 'Washington': 'WA',\n    'West Virginia': 'WV', 'Wisconsin': 'WI', 'Wyoming': 'WY'\n}\n\ndf_geo = df[['STATE_NAME', 'REMOTE_TYPE_NAME']].dropna()\n\n\n\n\nCode\ndf_geo = df[['STATE_NAME', 'REMOTE_TYPE_NAME']].dropna()\n\nremote_counts = df_geo[df_geo['REMOTE_TYPE_NAME'] == 'Remote'].groupby('STATE_NAME').size()\ntotal_counts = df_geo.groupby('STATE_NAME').size()\n\nremote_ratio_by_state = (remote_counts / total_counts).reset_index()\nremote_ratio_by_state.columns = ['STATE_NAME', 'REMOTE_RATIO']\n\nremote_ratio_by_state['STATE_ABBR'] = remote_ratio_by_state['STATE_NAME'].map(state_abbrev_map)\n\n\n\n\nCode\nimport geopandas as gpd\n\ngdf = gpd.read_file(\"shapefiles/cb_2021_us_state_20m.shp\")\n\ngdf = gdf[~gdf['STUSPS'].isin(['AS', 'GU', 'MP', 'PR', 'VI'])]\n\ngdf = gdf.merge(remote_ratio_by_state, left_on='NAME', right_on='STATE_NAME')\n\ncontiguous = gdf[~gdf['STUSPS'].isin(['AK', 'HI', 'PR'])]\n\nfig, ax = plt.subplots(1, 1, figsize=(14, 8))\ncontiguous.plot(\n    column='REMOTE_RATIO',\n    cmap='Blues',\n    linewidth=0.5,\n    ax=ax,\n    edgecolor='0.9',\n    legend=True,\n    legend_kwds={'label': \"Remote Job Ratio\", 'shrink': 0.5}\n)\n\nax.set_title('Remote Work Ratio by State (Contiguous U.S.)', fontsize=16, fontweight='bold')\nax.axis('off')\nplt.tight_layout()\nplt.savefig(\"figuresmurphy/us_remote_ratio_contiguous.png\", dpi=300)\nplt.show()\n\n\n\n\n\n\n\nThe map highlights that coastal and urban states like California, New York, and Massachusetts have more remote roles. In contrast, Midwest and Southern states show fewer remote postings, likely due to a stronger focus on in-person or manufacturing jobs."
  },
  {
    "objectID": "ml_analysis.html#logistic-regression-binary-classification-remote-vs-non-remote",
    "href": "ml_analysis.html#logistic-regression-binary-classification-remote-vs-non-remote",
    "title": "Modeling & Analysis",
    "section": "3.2 Logistic Regression: Binary Classification (Remote vs Non-Remote)",
    "text": "3.2 Logistic Regression: Binary Classification (Remote vs Non-Remote)\nTo identify what influences whether a job is remote, we used a logistic regression model. The confusion matrix below summarizes how well the model classifies remote and non-remote roles.\n\n\nCode\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report, confusion_matrix\n\n# 1. Preprocessing\ndf_logistic = df[['STATE_NAME', 'MAX_YEARS_EXPERIENCE', 'AVERAGE_SALARY', 'REMOTE_TYPE_NAME']].dropna()\n\ndf_logistic['REMOTE_TYPE_CLEANED'] = df_logistic['REMOTE_TYPE_NAME'].map({\n    'Remote': 'Remote',\n    'Hybrid Remote': 'Hybrid',\n    'Not Remote': 'Onsite'\n}).fillna('Onsite')\n\n# Create binary classification target\ndf_logistic['IS_REMOTE'] = df_logistic['REMOTE_TYPE_CLEANED'].apply(lambda x: 1 if x == 'Remote' else 0)\n\n# 2. One-hot encode state name\ndf_encoded = pd.get_dummies(df_logistic, columns=['STATE_NAME'], drop_first=True)\n\n# 3. Split data\nX = df_encoded.drop(['IS_REMOTE', 'REMOTE_TYPE_NAME', 'REMOTE_TYPE_CLEANED'], axis=1)\ny = df_encoded['IS_REMOTE']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# 4. Train model\nmodel = LogisticRegression(max_iter=1000)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\n# 5.  Evaluation\nprint(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\nprint(\"\\nClassification Report:\\n\", classification_report(y_test, y_pred))\n\n# 6. Visualize confusion matrix\nplt.figure(figsize=(10,8))\nsns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='YlGnBu')\nplt.title(\"Confusion Matrix\")\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.tight_layout()\nplt.savefig(\"figuresmurphy/logistic_confusion_matrix.png\", dpi=300)\nplt.show()\n\n\n\n\n\n\n\nThe model accurately distinguishes remote from non-remote jobs, performing better on non-remote roles. Some misclassifications remain, so job seekers in flexible roles should clearly state their work preferences."
  },
  {
    "objectID": "ml_analysis.html#linear-regression",
    "href": "ml_analysis.html#linear-regression",
    "title": "Modeling & Analysis",
    "section": "4.1 Linear Regression",
    "text": "4.1 Linear Regression\nWe also used a linear regression model to predict average salary based on location, experience, and remote type. The actual vs. predicted plot and residuals histogram below show the model’s performance.\n\n\nCode\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport matplotlib.pyplot as plt\n\n# 1. Preprocessing\ndf_reg = df[['STATE_NAME', 'MAX_YEARS_EXPERIENCE', 'REMOTE_TYPE_NAME', 'AVERAGE_SALARY']].dropna()\ndf_reg = df_reg[df_reg['AVERAGE_SALARY'] &lt; 300000]  #  Remove salary outliers\n\ndf_reg['REMOTE_TYPE_CLEANED'] = df_reg['REMOTE_TYPE_NAME'].map({\n    'Remote': 'Remote',\n    'Hybrid Remote': 'Hybrid',\n    'Not Remote': 'Onsite'\n}).fillna('Onsite')\n\n# 2. One-hot encode\ndf_reg_encoded = pd.get_dummies(df_reg, columns=['STATE_NAME', 'REMOTE_TYPE_CLEANED'], drop_first=True)\n\n# 3. Split data\nX = df_reg_encoded.drop(['REMOTE_TYPE_NAME', 'AVERAGE_SALARY'], axis=1)\ny = df_reg_encoded['AVERAGE_SALARY']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# 4.Train model\nreg_model = LinearRegression()\nreg_model.fit(X_train, y_train)\ny_pred = reg_model.predict(X_test)\n\n# 5. Evaluation\nprint(\"MSE:\", mean_squared_error(y_test, y_pred))\nprint(\"R-squared:\", r2_score(y_test, y_pred))\n\n# 6. Scatterplot of actual vs predicted\nplt.figure(figsize=(14, 7))\nplt.scatter(y_test, y_pred, alpha=0.5)\nplt.xlabel(\"Actual Salary\")\nplt.ylabel(\"Predicted Salary\")\nplt.title(\" Actual vs. Predicted Salary\")\nplt.grid(True, linestyle='--', linewidth=0.5, color='gray')\nplt.tight_layout()\nplt.savefig(\"figuresmurphy/regression_actual_vs_predicted.png\", dpi=300)\nplt.show()\n\n\n\n\n\n\n\nThe plot shows a clear linear trend but with greater dispersion compared to the random forest model, indicating that linear regression struggles to capture more complex salary patterns.\n\n\nCode\n# 7. Residuals histogram\nresiduals = y_test - y_pred\nplt.figure(figsize=(10, 6))\nplt.hist(residuals, bins=30, color='orange', edgecolor='black')\nplt.title(\"Residuals Histogram\")\nplt.xlabel(\"Residuals\")\nplt.ylabel(\"Frequency\")\nplt.tight_layout()\nplt.grid(True, linestyle='--', linewidth=0.5, color='gray')\nplt.savefig(\"figuresmurphy/regression_residuals.png\", dpi=300)\nplt.show()\n\n\n\n\n\n\n\nThe residuals histogram is roughly normal and centered around zero, suggesting no major bias. However, the spread shows that predictions can vary by several thousand dollars based on the input features."
  },
  {
    "objectID": "eda_enhance.html",
    "href": "eda_enhance.html",
    "title": "Extended EDA: Geographic Distribution",
    "section": "",
    "text": "This section presents an enhanced exploratory data analysis of job postings in the United States, with particular attention to remote work types and geographic patterns across industries, states, and cities. The objective is to examine how the distribution of remote, hybrid, and onsite jobs differs across regions, and how industry-specific trends reflect broader labor market shifts. Through this analysis, we aim to capture regional disparities, identify emerging hiring hubs, and understand how remote work adoption is reshaping spatial dynamics in the 2024 job market.\n\n1 Job Distribution by Industry (NAICS Level 2)\n\n\nCode\nwrapped_labels = ['\\n'.join(textwrap.wrap(label, width=10)) for label in industry_counts[\"Industry\"]]\n\nplt.figure(figsize=(18, 12))\nax = sns.barplot(data=industry_counts, x=\"Industry\", y=\"Job_Count\", width=0.8)\n\nax.set_xticklabels(wrapped_labels, rotation=0, ha='center')\n\nplt.title(\"Job Count by Industry (NAICS Level 2)\")\nplt.xticks(rotation=45, fontsize=8)\nplt.grid(axis='y', linestyle='--', alpha=0.7)\nplt.tight_layout()\nplt.savefig(\"figurestyj/job_count_by_industry.png\", dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\n\n\n\n\nThe bar chart illustrates the distribution of job postings by industry based on NAICS Level 2 classifications. Professional, Scientific, and Technical Services leads with over 20,000 postings, highlighting continued demand for high-skilled roles in fields such as software development, data analytics, and consultancy. In second place, Administrative and Support and Waste Management Services records approximately 9,000 postings, suggesting consistent labor needs in operational and support functions. Notably, over 11,000 jobs are grouped under “Unclassified Industry”, indicating either a lack of proper NAICS tagging or alternative sourcing paths. This limits interpretability and cross-sector benchmarking. Researchers including CBRE (2023) (Research (2023)) and the Brookings Institution (2020) (Institution (2020)) advocate for improving classification accuracy to enable better labor market diagnostics.\n\n\n2 Job Count by City (Top 15)\n\n\nCode\ncity_counts = df[\"CITY_NAME\"].value_counts().head(15).reset_index()\ncity_counts.columns = [\"City\", \"Job_Count\"]\n\nplt.figure(figsize=(14, 7))\nsns.barplot(data=city_counts, x=\"City\", y=\"Job_Count\", palette=\"Accent\")\nplt.title(\"Top 15 Cities by Job Count\")\nplt.xticks(rotation=45, ha=\"right\")\nplt.grid(axis='y', linestyle='--', alpha=0.7)\nplt.tight_layout()\nplt.savefig(\"figurestyj/top_cities_job_count.png\", dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\n\n\n\n\nThe chart ranks the top 15 cities by job volume. New York, NY tops the list with more than 2,100 postings, reinforcing its status as a diversified employment center. Chicago, IL and Atlanta, GA follow with approximately 1,800–1,900 postings, reflecting strong hiring across urban hubs. Mid-sized cities like Austin, Dallas, and Charlotte maintain substantial job flows, each reporting over 1,400 roles, highlighting their rise as regional economic centers. By contrast, San Francisco shows fewer than 1,000 postings, which may reflect data inconsistencies in city naming conventions or broader decentralization of hiring (Research (2023)). These patterns support the view that talent is dispersing from traditional tech clusters.\n\n\n3 Job Count by State\n\n\nCode\nstate_counts = df[\"STATE_NAME\"].value_counts().reset_index()\nstate_counts.columns = [\"State\", \"Job_Count\"]\n\nplt.figure(figsize=(14, 7))\nsns.barplot(data=state_counts.head(15), x=\"State\", y=\"Job_Count\", palette=\"Set2\")\nplt.title(\"Top 15 States by Job Count\")\nplt.xticks(rotation=30)\nplt.grid(axis='y', linestyle='--', alpha=0.7)\nplt.tight_layout()\nplt.savefig(\"figurestyj/top_states_job_count.png\", dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\n\n\n\n\nThe bar chart summarizes job volumes by state, with Texas and California firmly in the lead—reporting over 8,000 and 7,000 postings, respectively. Florida, Virginia, and Illinois follow with between 4,000–5,000, showing robust job demand in both coastal and inland economies. Several mid-sized states such as Michigan, Arizona, and Massachusetts also appear, each posting around 2,000–2,500 jobs, confirming their growing role in the distributed labor landscape. These findings align with post-pandemic observations that workforce opportunities are diversifying geographically (Institution (2020)).\n\n\n4 Heatmap: State × Industry (Cross Tab)\n\n\nCode\ncross_tab = pd.crosstab(df[\"STATE_NAME\"], df[\"NAICS_2022_2_NAME\"])\ntop_states = df[\"STATE_NAME\"].value_counts().head(10).index\ntop_industries = df[\"NAICS_2022_2_NAME\"].value_counts().head(6).index\nfiltered_heatmap = cross_tab.loc[top_states, top_industries]\n\nplt.figure(figsize=(10, 6))\nax = sns.heatmap(filtered_heatmap, annot=True, fmt=\"d\", cmap=\"YlGnBu\")\n\n\nxtick_labels = ax.get_xticklabels()\nwrapped_labels = [\n    '\\n'.join(textwrap.wrap(label.get_text(), width=15)) for label in xtick_labels\n]\nax.set_xticklabels(wrapped_labels, rotation=0)\nplt.xlabel(\"NAICS_2022_2_NAME\", fontsize=14) \npli.ylabel(\"State Name\", fontsize=14)\nplt.title(\"Top Industries in Top 10 States\")\nplt.tight_layout()\nplt.savefig(\"figurestyj/state_industry_heatmap.png\", dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\n\n\n\n\nThe heatmap presents cross-tabulated job postings by industry and state. Texas dominates in Professional, Scientific, and Technical Services (3,046 postings), followed by California (2,303), suggesting a concentration of high-value roles. Texas also registers significant numbers in Administrative Services (860) and Finance and Insurance (703), illustrating sectoral diversity. New York, although lower in total volume, ranks second in Finance and Insurance (483)—a reflection of its enduring strength in financial services. Meanwhile, California demonstrates notable demand in Information (480) and Administrative Services (949), pointing to its dual focus on technology and operational infrastructure. These distributions are consistent with Bureau of Labor Statistics (2024) (U.S. Bureau of Labor Statistics (2024)) data on regional industry specialization.\n\n\n5 Remote Job Distribution by State\n\n\nCode\nremote_by_state = df.groupby([\"STATE_NAME\", \"REMOTE_TYPE_NAME\"]).size().unstack(fill_value=0)\nremote_by_state = remote_by_state.loc[remote_by_state.sum(axis=1).sort_values(ascending=False).head(10).index]\n\nremote_by_state.plot(kind=\"bar\", stacked=True, figsize=(12, 6), colormap=\"Dark2\")\nplt.title(\"Remote Job Distribution by State\")\nplt.xlabel(\"State\")\nplt.ylabel(\"Number of Job Postings\")\nplt.grid(axis='y', linestyle='--', alpha=0.7)\nplt.xticks(rotation=30)\nplt.tight_layout()\nplt.savefig(\"figurestyj/remote_by_state.png\", dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\n\n\n\n\nThis stacked bar chart illustrates the distribution of remote, hybrid, and on-site jobs across states. Texas again ranks first, posting over 8,000 jobs, with more than 2,000 labeled as Remote or Hybrid Remote. California and Florida closely follow, both exceeding 7,000 total postings, and California alone has over 1,800 Remote jobs. Virginia, Illinois, and New York show balanced adoption of flexible work types, with Virginia particularly strong in hybrid arrangements. These results mirror national trends highlighting the growth of remote work, especially in knowledge-intensive occupations (Hsu & Tambe (2024) ). The state-level differences may reflect varying industry compositions and remote-readiness infrastructure.\n\n\n6 Summary\nThis geographic analysis reveals several core dynamics shaping the U.S. labor market. Texas and California consistently lead in job count, sector diversity, and remote job availability. At the city level, New York, Chicago, and Atlanta remain dominant, yet the emergence of mid-sized cities such as Austin and Charlotte signals a shift toward regional diffusion of opportunities. Professional, Scientific, and Technical Services remains the top industry nationwide, while categories like Administrative Support and Information exhibit state-level specialization. The widespread presence of remote work, especially in high-demand states, reinforces research on post-pandemic labor decentralization (Hsu & Tambe (2024); Tan et al. (2023)). However, the prevalence of the “Unclassified Industry” label continues to limit granularity, emphasizing the need for improved data standardization to support informed policy and workforce planning.\n\n\n\n\n\nReferences\n\nHsu, D. H., & Tambe, P. (2024). Remote work and job applicant diversity: Evidence from technology startups. Management Science. https://doi.org/10.1287/mnsc.2022.03391\n\n\nInstitution, B. (2020). The geography of jobs in the COVID-19 era. https://www.brookings.edu/articles/the-geography-of-jobs-in-the-covid-19-era/\n\n\nResearch, C. (2023). 2023 scoring tech talent report. https://www.cbre.com/insights/books/scoring-tech-talent-2023\n\n\nTan, S., Fang, K., & Lester, T. (2023). Post-pandemic travel patterns of remote tech workers. Transportation Research Interdisciplinary Perspectives, 19, 100804. https://doi.org/10.1016/j.trip.2023.100804\n\n\nU.S. Bureau of Labor Statistics. (2024). Employment by major industry sector. https://www.bls.gov/emp/tables/employment-by-major-industry-sector.htm"
  },
  {
    "objectID": "data_cleaning_eda.html",
    "href": "data_cleaning_eda.html",
    "title": "Data Cleaning & EDA",
    "section": "",
    "text": "The data cleaning process was designed to improve data quality and provide a reliable foundation for analysis.\nWe began by removing irrelevant and redundant columns. These included tracking metadata (such as ID, URL, and LAST_UPDATED_TIMESTAMP) and raw text-heavy fields (like BODY and TITLE_RAW) that added noise without offering analytical value. Multiple versions of NAICS and `SOC codes were also removed, keeping only the most detailed levels to ensure clarity while reducing duplication.\n\n\n\n# Define columns that are irrelevant or redundant for our analysis\ncolumns_to_drop = [\n    # Tracking and metadata\n    \"ID\", \"LAST_UPDATED_DATE\", \"LAST_UPDATED_TIMESTAMP\", \"DUPLICATES\",\n    \"URL\", \"ACTIVE_URLS\", \"ACTIVE_SOURCES_INFO\", \"SOURCE_TYPES\", \"SOURCES\",\n\n    # Company raw info\n    \"COMPANY_RAW\", \"COMPANY_IS_STAFFING\",\n\n    # Raw or text-heavy fields\n    \"TITLE_RAW\", \"BODY\",\n\n    # Modeled / derived fields\n    \"MODELED_EXPIRED\", \"MODELED_DURATION\",\n\n    # Educational levels (redundant versions)\n    \"EDUCATION_LEVELS\", \"EDUCATION_LEVELS_NAME\",\n    \"MIN_EDULEVELS\", \"MIN_EDULEVELS_NAME\", \"MAX_EDULEVELS\",\n\n    # Redundant NAICS / SOC codes\n    \"NAICS_2022_2\", \"NAICS_2022_2_NAME\",\n    \"NAICS_2022_3\", \"NAICS_2022_3_NAME\",\n    \"SOC_2\", \"SOC_3\", \"SOC_5\"\n]\n\n# Drop columns, ignore if a column is missing\ndf1.drop(columns=columns_to_drop, inplace=True, errors=\"ignore\")\n\n# Display the first few rows to confirm\ndf1.head()\n\nThe dataset was first reviewed to identify redundant or irrelevant columns. Tracking and metadata fields (such as ID, URL, LAST_UPDATED_TIMESTAMP, SOURCE_TYPES), raw text-heavy fields (BODY, TITLE_RAW), derived or modeled fields (MODELED_EXPIRED, MODELED_DURATION), company-specific tags, and multiple redundant education or occupation code versions (e.g., NAICS_2022_2_NAME, SOC_5) were dropped to reduce dimensional noise and simplify downstream processing. This step was guided by a predefined drop list and executed with safeguards to ignore missing columns.\n\n\n\n\n\nCode\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nos.makedirs(\"figureswxw\", exist_ok=True)\n\n\n\n\nCode\nimport missingno as msno\nimport matplotlib.pyplot as plt\nmsno.heatmap(df1)\n\nplt.title(\"Missing Values Heatmap\")\nplt.tight_layout()\nplt.savefig(\"figureswxw/missing_values_heatmap.png\", dpi=300,  bbox_inches='tight')\nplt.show()\n\n\n\n\n\n\n\nA missing values heatmap revealed that many columns—especially those related to occupations, certifications, and specialized skills (e.g., ONET, LOT_OCCUPATION, SPECIALIZED_SKILLS_NAME)—had substantial missing data. Columns with over 50% missing values were dropped, particularly those with overlapping or overly granular content. This step helped reduce redundancy and potential multicollinearity in the dataset.\nKey numeric fields such as SALARY and DURATION were imputed using median values to reduce the effect of outliers. For categorical variables like REMOTE_TYPE_NAME, EMPLOYMENT_TYPE_NAME, and COMPANY_NAME, missing values were replaced with “Unknown” to preserve data completeness.\n\n\nCode\n# Drop columns with &gt;50% missing values\ndf1.dropna(axis=1, thresh=len(df1) * 0.5, inplace=True)\n\n\nif \"SALARY\" in df1.columns:\n    df1[\"SALARY\"] = df1[\"SALARY\"].fillna(df1[\"SALARY\"].median())\n\n    df1[\"DURATION\"] = df1[\"DURATION\"].fillna(df1[\"DURATION\"].median())\n\ncategorical_columns = [\"REMOTE_TYPE_NAME\", \"COMPANY_NAME\", \"MAX_EDULEVELS_NAME\"]\n\nfor col in categorical_columns:\n    if col in df1.columns:\n        df1[col] = df1[col].fillna(\"Unknown\")\n\n\ndf1.info()\n\n\n\n\n\n\ndf1.drop_duplicates(subset=[\"TITLE_CLEAN\", \"COMPANY_NAME\", \"CITY_NAME\", \"POSTED\"], inplace=True)\n\ndf1[\"REMOTE_TYPE_NAME\"].value_counts(dropna=False)\ndf1[\"EMPLOYMENT_TYPE_NAME\"].value_counts(dropna=False)\n\nDuplicate job postings were removed using a composite key made up of TITLE_CLEAN, COMPANY_NAME, CITY_NAME, and POSTED_DATE. We also excluded records with invalid or conflicting industry or occupation codes to ensure consistency.\n\n\nCode\n#improve\n\ndf1[\"EMPLOYMENT_TYPE_NAME\"] = df1[\"EMPLOYMENT_TYPE_NAME\"].replace({\n    \"Part-time (â‰¤ 32 hours)\": \"Part-time (≤ 32 hours)\",\n    \"Part-time / full-time\": \"Part-time / Full-time\"\n})\ndf1[\"EMPLOYMENT_TYPE_NAME\"] = df1[\"EMPLOYMENT_TYPE_NAME\"].fillna(\"Unknown\")\ndf1[\"EMPLOYMENT_TYPE_NAME\"].value_counts()\n\n\nDuplicate job postings were removed using a composite key made up of TITLE_CLEAN, COMPANY_NAME, CITY_NAME, and POSTED_DATE. We also excluded records with invalid or conflicting industry or occupation codes to ensure consistency.\n\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf1[\"IS_AI\"] = df1[\"NAICS_2022_6_NAME\"].fillna(\"\").str.contains(\"AI|Artificial Intelligence\", case=False) | \\\n               df1[\"LOT_OCCUPATION\"].fillna(\"\").str.contains(\"AI|Artificial Intelligence\", case=False)\n\ndf1[\"IS_AI\"] = df1[\"IS_AI\"].map({True: \"AI\", False: \"Non-AI\"})\n\nTo support analysis goals, we created two derived variables. The first, IS_AI, classified jobs as AI-related based on keywords such as “AI,” “Artificial Intelligence,” or “Machine Learning.” The second grouped job locations as either “Urban” or “Rural” based on a predefined list of major metro areas.\nThis structured cleaning approach produced a streamlined, consistent dataset ready for accurate modeling, visualization, and geographic insight generation."
  },
  {
    "objectID": "data_cleaning_eda.html#dropping-unnecessary-columns",
    "href": "data_cleaning_eda.html#dropping-unnecessary-columns",
    "title": "Data Cleaning & EDA",
    "section": "",
    "text": "# Define columns that are irrelevant or redundant for our analysis\ncolumns_to_drop = [\n    # Tracking and metadata\n    \"ID\", \"LAST_UPDATED_DATE\", \"LAST_UPDATED_TIMESTAMP\", \"DUPLICATES\",\n    \"URL\", \"ACTIVE_URLS\", \"ACTIVE_SOURCES_INFO\", \"SOURCE_TYPES\", \"SOURCES\",\n\n    # Company raw info\n    \"COMPANY_RAW\", \"COMPANY_IS_STAFFING\",\n\n    # Raw or text-heavy fields\n    \"TITLE_RAW\", \"BODY\",\n\n    # Modeled / derived fields\n    \"MODELED_EXPIRED\", \"MODELED_DURATION\",\n\n    # Educational levels (redundant versions)\n    \"EDUCATION_LEVELS\", \"EDUCATION_LEVELS_NAME\",\n    \"MIN_EDULEVELS\", \"MIN_EDULEVELS_NAME\", \"MAX_EDULEVELS\",\n\n    # Redundant NAICS / SOC codes\n    \"NAICS_2022_2\", \"NAICS_2022_2_NAME\",\n    \"NAICS_2022_3\", \"NAICS_2022_3_NAME\",\n    \"SOC_2\", \"SOC_3\", \"SOC_5\"\n]\n\n# Drop columns, ignore if a column is missing\ndf1.drop(columns=columns_to_drop, inplace=True, errors=\"ignore\")\n\n# Display the first few rows to confirm\ndf1.head()\n\nThe dataset was first reviewed to identify redundant or irrelevant columns. Tracking and metadata fields (such as ID, URL, LAST_UPDATED_TIMESTAMP, SOURCE_TYPES), raw text-heavy fields (BODY, TITLE_RAW), derived or modeled fields (MODELED_EXPIRED, MODELED_DURATION), company-specific tags, and multiple redundant education or occupation code versions (e.g., NAICS_2022_2_NAME, SOC_5) were dropped to reduce dimensional noise and simplify downstream processing. This step was guided by a predefined drop list and executed with safeguards to ignore missing columns."
  },
  {
    "objectID": "data_cleaning_eda.html#handling-missing-values",
    "href": "data_cleaning_eda.html#handling-missing-values",
    "title": "Data Cleaning & EDA",
    "section": "",
    "text": "Code\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nos.makedirs(\"figureswxw\", exist_ok=True)\n\n\n\n\nCode\nimport missingno as msno\nimport matplotlib.pyplot as plt\nmsno.heatmap(df1)\n\nplt.title(\"Missing Values Heatmap\")\nplt.tight_layout()\nplt.savefig(\"figureswxw/missing_values_heatmap.png\", dpi=300,  bbox_inches='tight')\nplt.show()\n\n\n\n\n\n\n\nA missing values heatmap revealed that many columns—especially those related to occupations, certifications, and specialized skills (e.g., ONET, LOT_OCCUPATION, SPECIALIZED_SKILLS_NAME)—had substantial missing data. Columns with over 50% missing values were dropped, particularly those with overlapping or overly granular content. This step helped reduce redundancy and potential multicollinearity in the dataset.\nKey numeric fields such as SALARY and DURATION were imputed using median values to reduce the effect of outliers. For categorical variables like REMOTE_TYPE_NAME, EMPLOYMENT_TYPE_NAME, and COMPANY_NAME, missing values were replaced with “Unknown” to preserve data completeness.\n\n\nCode\n# Drop columns with &gt;50% missing values\ndf1.dropna(axis=1, thresh=len(df1) * 0.5, inplace=True)\n\n\nif \"SALARY\" in df1.columns:\n    df1[\"SALARY\"] = df1[\"SALARY\"].fillna(df1[\"SALARY\"].median())\n\n    df1[\"DURATION\"] = df1[\"DURATION\"].fillna(df1[\"DURATION\"].median())\n\ncategorical_columns = [\"REMOTE_TYPE_NAME\", \"COMPANY_NAME\", \"MAX_EDULEVELS_NAME\"]\n\nfor col in categorical_columns:\n    if col in df1.columns:\n        df1[col] = df1[col].fillna(\"Unknown\")\n\n\ndf1.info()"
  },
  {
    "objectID": "data_cleaning_eda.html#remove-duplicates",
    "href": "data_cleaning_eda.html#remove-duplicates",
    "title": "Data Cleaning & EDA",
    "section": "",
    "text": "df1.drop_duplicates(subset=[\"TITLE_CLEAN\", \"COMPANY_NAME\", \"CITY_NAME\", \"POSTED\"], inplace=True)\n\ndf1[\"REMOTE_TYPE_NAME\"].value_counts(dropna=False)\ndf1[\"EMPLOYMENT_TYPE_NAME\"].value_counts(dropna=False)\n\nDuplicate job postings were removed using a composite key made up of TITLE_CLEAN, COMPANY_NAME, CITY_NAME, and POSTED_DATE. We also excluded records with invalid or conflicting industry or occupation codes to ensure consistency.\n\n\nCode\n#improve\n\ndf1[\"EMPLOYMENT_TYPE_NAME\"] = df1[\"EMPLOYMENT_TYPE_NAME\"].replace({\n    \"Part-time (â‰¤ 32 hours)\": \"Part-time (≤ 32 hours)\",\n    \"Part-time / full-time\": \"Part-time / Full-time\"\n})\ndf1[\"EMPLOYMENT_TYPE_NAME\"] = df1[\"EMPLOYMENT_TYPE_NAME\"].fillna(\"Unknown\")\ndf1[\"EMPLOYMENT_TYPE_NAME\"].value_counts()\n\n\nDuplicate job postings were removed using a composite key made up of TITLE_CLEAN, COMPANY_NAME, CITY_NAME, and POSTED_DATE. We also excluded records with invalid or conflicting industry or occupation codes to ensure consistency.\n\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf1[\"IS_AI\"] = df1[\"NAICS_2022_6_NAME\"].fillna(\"\").str.contains(\"AI|Artificial Intelligence\", case=False) | \\\n               df1[\"LOT_OCCUPATION\"].fillna(\"\").str.contains(\"AI|Artificial Intelligence\", case=False)\n\ndf1[\"IS_AI\"] = df1[\"IS_AI\"].map({True: \"AI\", False: \"Non-AI\"})\n\nTo support analysis goals, we created two derived variables. The first, IS_AI, classified jobs as AI-related based on keywords such as “AI,” “Artificial Intelligence,” or “Machine Learning.” The second grouped job locations as either “Urban” or “Rural” based on a predefined list of major metro areas.\nThis structured cleaning approach produced a streamlined, consistent dataset ready for accurate modeling, visualization, and geographic insight generation."
  },
  {
    "objectID": "data_cleaning_eda.html#remote-type-distribution",
    "href": "data_cleaning_eda.html#remote-type-distribution",
    "title": "Data Cleaning & EDA",
    "section": "2.1 Remote Type distribution",
    "text": "2.1 Remote Type distribution\n\n\nCode\nremote_counts = df1[\"REMOTE_TYPE_NAME\"].value_counts()\n\nplt.figure(figsize=(10,6))\nsns.barplot(\n    x=remote_counts.index, \n    y=remote_counts.values, \n    palette=\"Set2\"\n)\nplt.title(\"Remote Type Distribution\")\nplt.ylabel(\"Number of Job Postings\")\nplt.xlabel(\"Remote Type\")\nplt.grid(axis='y', linestyle='--', alpha=0.7)\nplt.tight_layout()\nplt.savefig(\"figureswxw/remote_type_distribution.png\", dpi=300,  bbox_inches='tight')\nplt.show()\n\n\n\n\n\n\n\nThe bar chart illustrates the distribution of job postings by remote type, allowing us to evaluate how different work arrangements are represented in the dataset. The five categories include Remote, Hybrid Remote, Not Remote, Unknown, and [None] (where no remote type is specified).\nThe most prominent finding is that the majority of job postings—approximately 55,000 entries—are labeled as [None], meaning no remote type was recorded. This accounts for roughly 75% of all postings, indicating a significant inconsistency or gap in how remote work arrangements are captured in job listings.\nAmong the postings that do specify a remote type: * Remote jobs make up about 12,000 postings, representing roughly 16% of the total dataset.\n\nHybrid Remote roles total around 2,500 postings, or approximately 3%.\nNot Remote (fully on-site) roles account for fewer than 1,000 entries, making up less than 2% of the dataset.\nUnknown entries are minimal, with fewer than 500 postings.\n\nThese results suggest that while remote roles are clearly present in the dataset, their actual prevalence may be underreported due to missing or incomplete labeling. Additionally, fully on-site jobs appear to be less frequently tagged or advertised as such, possibly reflecting a shift in employer focus or changes in how job flexibility is communicated."
  },
  {
    "objectID": "data_cleaning_eda.html#top-10-states-ai-vs-non-ai-job-postings",
    "href": "data_cleaning_eda.html#top-10-states-ai-vs-non-ai-job-postings",
    "title": "Data Cleaning & EDA",
    "section": "2.2 Top 10 states : AI vs Non-AI Job Postings",
    "text": "2.2 Top 10 states : AI vs Non-AI Job Postings\n\n\nCode\ntop_states = df1[\"STATE_NAME\"].value_counts().head(10).index\ndf_top_states = df1[df1[\"STATE_NAME\"].isin(top_states)]\n\npivot_states = df_top_states.groupby([\"STATE_NAME\", \"IS_AI\"]).size().unstack(fill_value=0)\n\npivot_states.plot(kind=\"bar\", stacked=True, figsize=(12,6), colormap=\"Set3\")\nplt.title(\"Top 10 States: AI vs Non-AI Job Postings\")\nplt.ylabel(\"Number of Job Postings\")\nplt.xlabel(\"State\")\nplt.xticks(rotation=30)\nplt.grid(axis='y', linestyle='--', alpha=0.7)\nplt.tight_layout()\nplt.savefig(\"figureswxw/top_states_ai_nonai.png\", dpi=300,  bbox_inches='tight')\nplt.show()\n\n\n\n\n\n\n\nThe stacked bar chart illustrates the distribution of AI and non-AI job postings across the ten states with the highest total job postings in the dataset. From the chart, we can see that Texas has the highest total job postings, with approximately 8,000 positions. Among these, AI-related jobs account for a small portion, estimated at around 400–500 postings, representing roughly 5% to 6% of the total in Texas. California follows closely, with about 7,000 total postings and approximately 200–300 AI-related jobs, or roughly 3% to 4% of its total. Other states in the top 10, such as Florida, Illinois, and New York, each have between 3,000 and 4,000 total postings, with AI-related roles making up an even smaller share, generally under 3%.\nThe visualization reveals that non-AI jobs dominate in all top states, emphasizing that while AI hiring is present, it constitutes only a small fraction of overall job demand.\nStates like Texas and California, while leaders in AI job volume, still offer significant room for AI job expansion relative to overall hiring activity."
  },
  {
    "objectID": "data_cleaning_eda.html#top-10-cities-ai-vs-non-ai-job-postings",
    "href": "data_cleaning_eda.html#top-10-cities-ai-vs-non-ai-job-postings",
    "title": "Data Cleaning & EDA",
    "section": "2.3 Top 10 cities: AI vs Non-AI Job Postings",
    "text": "2.3 Top 10 cities: AI vs Non-AI Job Postings\n\n\nCode\ntop_cities = df1[\"CITY_NAME\"].value_counts().head(10).index\ndf_top_cities = df1[df1[\"CITY_NAME\"].isin(top_cities)]\n\npivot_cities = df_top_cities.groupby([\"CITY_NAME\", \"IS_AI\"]).size().unstack(fill_value=0)\n\npivot_cities.plot(kind=\"bar\", stacked=True, figsize=(12,6), colormap=\"Set1\")\nplt.title(\"Top 10 Cities: AI vs Non-AI Job Postings\")\nplt.ylabel(\"Number of Job Postings\")\nplt.xlabel(\"City\")\nplt.xticks(rotation=30)\nplt.grid(axis='y', linestyle='--', alpha=0.7)\nplt.tight_layout()\nplt.savefig(\"figureswxw/top_cities_ai_nonai.png\", dpi=300)\nplt.show()\n\n\n\n\n\n\n\nThe stacked bar chart illustrates the distribution of AI and non-AI job postings across the ten cities with the highest total job postings in the dataset.\nAmong major U.S. cities, New York, NY leads with the highest number of job postings, totaling approximately 2,100, of which AI-related roles account for 5% to 7% (roughly 100–150 listings). Chicago, IL and Austin, TX follow closely, each with 1,800 to 1,900 postings, where AI positions represent about 4% to 6% of the total. Atlanta, GA reports around 1,700 listings, with AI jobs making up approximately 5%. Interestingly, San Francisco, CA, despite being a recognized tech hub, shows a comparatively lower total of about 900 postings, though AI roles still constitute around 4%. Other top cities—Boston, MA; Dallas, TX; Houston, TX; Charlotte, NC; and Washington, DC—each feature 1,000 to 1,400 job postings, with AI-related jobs comprising 3% to 6%. These figures highlight that while AI roles are emerging across urban markets, they remain a modest share of overall job opportunities, even in traditionally tech-focused regions.\nOverall, the chart reveals that in all top cities, non-AI job postings dominate. However, cities like New York, Austin, and Chicago demonstrate a slightly higher share of AI-related jobs compared to others. This suggests that while AI hiring is present across major urban centers, it remains a small subset of total job demand."
  },
  {
    "objectID": "data_cleaning_eda.html#time-trend-of-remote-work-types",
    "href": "data_cleaning_eda.html#time-trend-of-remote-work-types",
    "title": "Data Cleaning & EDA",
    "section": "2.4 Time Trend of Remote Work Types",
    "text": "2.4 Time Trend of Remote Work Types\n\n\nCode\nif \"POSTED\" in df1.columns:\n    df1[\"POSTED_DATE\"] = pd.to_datetime(df1[\"POSTED\"], errors='coerce')\n    df1 = df1.dropna(subset=[\"POSTED_DATE\"])\n    df1[\"POSTED_MONTH\"] = df1[\"POSTED_DATE\"].dt.to_period(\"M\")\n    \n    trend = df1.groupby([\"POSTED_MONTH\", \"REMOTE_TYPE_NAME\"]).size().unstack(fill_value=0)\n    \n    trend.plot(figsize=(14,7))\n    plt.title(\"Remote Work Trends Over Time\", fontsize=14)\n    plt.ylabel(\"Number of Job Postings\")\n    plt.xlabel(\"Month\")\n    plt.grid(axis='y', linestyle='--', alpha=0.7)\n    plt.tight_layout()\n    plt.savefig(\"figureswxw/remote_trend_over_time.png\", dpi=300,  bbox_inches='tight')\n    plt.show()\nelse:\n    print(\"POSTED column not found in dataset.\")\n\n\n\n\n\n\n\nThis line chart compares monthly hiring trends in tech hubs versus other locations from May to September 2024. Cities designated as “tech hubs” include San Francisco, Austin, and Boston, based on their historical dominance in the U.S. technology sector. These were manually classified using the CITY_NAME variable. All remaining cities were grouped under the “Other” category.\nThe chart displays only the “Other” trend line because job postings from designated tech hubs were either minimal or not present in the dataset during the selected period. This may suggest a temporary drop in hiring activity within traditional hubs or limitations in how CITY_NAME values are recorded and parsed in the raw data.\nKey observations emerge from the “Other” category:\n\nJob postings exhibited a noticeable fluctuation over the observed period, starting at approximately 15,000 in May, dipping to around 12,400 in July, and then rebounding to over 15,000 by September. This pattern reflects a typical mid-year hiring slowdown followed by a Q3 recovery, consistent with known seasonal trends in recruitment cycles.\nThe relatively low job volume from traditional tech hubs, such as San Francisco, may point to either a genuine geographic shift in hiring or issues related to data consistency—for instance, inconsistent city name formats (e.g., “San Francisco, CA” vs. “San Francisco”). Broadening the definition of tech hubs to include cities like Seattle or New York could offer a clearer picture of regional dynamics.\n\nNotably, this trend supports recent research suggesting a decentralization of high-skill and AI-related job opportunities beyond traditional innovation centers (Hsu & Tambe (2024)). As remote and hybrid work arrangements become more embedded in organizational strategies, emerging cities may increasingly attract top talent and cultivate localized innovation ecosystems."
  },
  {
    "objectID": "data_cleaning_eda.html#tech-hubs-vs-other-locations-hiring-trends",
    "href": "data_cleaning_eda.html#tech-hubs-vs-other-locations-hiring-trends",
    "title": "Data Cleaning & EDA",
    "section": "2.5 Tech Hubs vs Other Locations Hiring Trends",
    "text": "2.5 Tech Hubs vs Other Locations Hiring Trends\n\n\nCode\ndf1[\"IS_HUB\"] = df1[\"CITY_NAME\"].apply(lambda x: \"Hub\" if x in [\"San Francisco\", \"Austin\", \"Boston\"] else \"Other\")\n\npivot_hub = df1.groupby([\"POSTED_MONTH\", \"IS_HUB\"]).size().unstack(fill_value=0)\n\npivot_hub.plot(figsize=(14,7))\nplt.title(\"Hiring Trends: Tech Hubs vs Other Locations\")\nplt.ylabel(\"Number of Job Postings\")\nplt.xlabel(\"Month\")\nplt.grid(axis='y', linestyle='--', alpha=0.7)\nplt.tight_layout()\nplt.savefig(\"figureswxw/techhub_vs_other_trend.png\", dpi=300, bbox_inches='tight')\nplt.show()\n\n\n\n\n\n\n\nA line plot tracking hiring trends from May to September 2024 reveals notable patterns in job postings across non-tech hub cities compared to traditional tech hubs. Cities were categorized using the CITY_NAME field into “Hub” (San Francisco, Austin, Boston) or “Other”, with the classification stored in a new IS_HUB column. However, the resulting visualization only displays the “Other” group, with no visible data for “Hub” cities—likely due to data sparsity or inconsistent city naming conventions (e.g., “San Francisco” vs. “San Francisco, CA”) that inadvertently filtered out hub entries.\nFor non-hub cities, the data shows a clear seasonal pattern: job postings peaked at 15,000 in May, dipped to 12,400 by July, then rebounded sharply to over 15,200 by September. This trajectory aligns with typical summer hiring slowdowns followed by a Q3 recovery, suggesting sustained and dynamic labor demand in non-traditional locations.\nDespite the lack of visible data from tech hubs, the strong activity among non-hub cities supports the hypothesis that job growth—particularly for remote and hybrid roles—is shifting beyond legacy innovation centers. As companies explore cost-effective expansion and distributed workforce models, emerging cities are becoming increasingly attractive for both employers and job seekers. This trend reinforces findings from recent research on the geographic decentralization of knowledge work (Hsu & Tambe (2024); Tan et al. (2023))."
  },
  {
    "objectID": "data_cleaning_eda.html#remote-job-trend-by-industry",
    "href": "data_cleaning_eda.html#remote-job-trend-by-industry",
    "title": "Data Cleaning & EDA",
    "section": "2.6 Remote Job Trend by Industry",
    "text": "2.6 Remote Job Trend by Industry\n\n\nCode\ntop_industries = (\n    df1.groupby(\"NAICS_2022_6_NAME\").size()\n    .sort_values(ascending=False)\n    .head(10)\n    .index\n)\n\n\ndf_top_ind = df1[df1[\"NAICS_2022_6_NAME\"].isin(top_industries)]\n\n\ndf_top_ind[\"POSTED_DATE\"] = pd.to_datetime(df_top_ind[\"POSTED\"], errors='coerce')\ndf_top_ind = df_top_ind.dropna(subset=[\"POSTED_DATE\"])\ndf_top_ind[\"POSTED_MONTH\"] = df_top_ind[\"POSTED_DATE\"].dt.to_period(\"M\")\n\n\npivot = df_top_ind.groupby([\"POSTED_MONTH\", \"NAICS_2022_6_NAME\"]).size().unstack(fill_value=0)\n\npivot.plot(figsize=(14,7))\nplt.title(\"Remote Job Trends by Top 5 Industries Over Time\", fontsize=14)\nplt.ylabel(\"Number of Job Postings\")\nplt.xlabel(\"Month\")\nplt.grid(axis='y', linestyle='--', alpha=0.7)\nplt.legend(\n    title=\"NAICS_2022_6_NAME\",\n    loc='upper center',\n    bbox_to_anchor=(0.5, -0.15),  \n    ncol=2,                       \n    frameon=False\n)\nplt.tight_layout()\nplt.savefig(\"figureswxw/remote_trend_top5_industry.png\", dpi=30,  bbox_inches='tight')\nplt.show()\n\n\n\n\n\n\n\nThis section examines the temporal dynamics of remote job postings across the top 10 industries, as classified by the NAICS_2022_6_NAME field, from May to September 2024. The analysis leverages monthly aggregation based on the POSTED date to detect changes in hiring patterns over time.\nTo identify the most active sectors, the dataset was grouped by industry and sorted by total job postings. The top 10 industries were then isolated for visualization. These include a diverse set of sectors such as Administrative Management and General Management Consulting Services, Computer Systems Design Services, Commercial Banking, and Employment Placement Agencies, among others.\nThe resulting line chart reveals several key trends in remote job postings by industry from May to September 2024. Administrative Management and Consulting consistently led in remote hiring activity, exceeding 1,800 postings per month and peaking at over 2,000 in September. Computer-related industries, such as Computer Systems Design Services and Custom Computer Programming Services, followed closely. Though these sectors experienced a slight decline in July, they steadily recovered through August and September, reflecting sustained demand for remote tech talent.\nOther industries, including finance (Commercial Banking) and healthcare (Direct Health and Medical Insurance Carriers), maintained moderate yet stable levels of remote job postings—typically between 700 and 1,000 per month—signaling ongoing digital transformation in these sectors. In contrast, employment services industries (e.g., Temporary Help Services and Employment Placement Agencies) exhibited greater volatility, with postings fluctuating between 250 and 600 monthly, suggesting heightened sensitivity to short-term labor market conditions.\nA broad decline in remote job postings across all sectors was observed in July, likely tied to seasonal hiring slowdowns, but most industries showed a robust recovery in August and September. Overall, the data confirms that while technology continues to dominate remote hiring, consulting, finance, and healthcare are also playing substantial roles in the expansion of remote work opportunities."
  },
  {
    "objectID": "data_cleaning_eda.html#urbanrural-region-ai-vs-non-ai-job-postings",
    "href": "data_cleaning_eda.html#urbanrural-region-ai-vs-non-ai-job-postings",
    "title": "Data Cleaning & EDA",
    "section": "2.7 Urban/Rural Region: AI vs Non-AI Job Postings",
    "text": "2.7 Urban/Rural Region: AI vs Non-AI Job Postings\n\n\nCode\nurban_cities = [\n    \"New York\", \"Los Angeles\", \"Chicago\", \"Houston\", \"San Francisco\",\n    \"Austin\", \"Boston\", \"Dallas\", \"Seattle\", \"Washington\", \"Atlanta\"\n]\n\ndf1[\"CITY_NAME_CLEAN\"] = df1[\"CITY_NAME\"].str.split(\",\").str[0].str.strip().str.title()\n\ndf1[\"Urban_Rural\"] = df1[\"CITY_NAME_CLEAN\"].apply(\n    lambda x: \"Urban\" if x in urban_cities else \"Rural\"\n)\n\nprint(df1[\"Urban_Rural\"].value_counts())\n\n\n\n2.7.1 Stacked Bar Chart\n\n\nCode\nif {\"Urban_Rural\", \"IS_AI\"}.issubset(df1.columns):\n    pivot_urban = df1.groupby([\"Urban_Rural\", \"IS_AI\"]).size().unstack(fill_value=0)\n\n    ax = pivot_urban.plot(\n        kind=\"bar\",\n        stacked=True,\n        figsize=(10, 6),\n        color=[\"#ff9999\", \"#66b3ff\"],\n        edgecolor=\"black\"\n    )\n    ax.set_title(\"Urban and Rural Regions: AI vs Non-AI Job Postings\", fontsize=14)\n    ax.set_ylabel(\"Number of Job Postings\")\n    ax.set_xlabel(\"Region Type\")\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=0)\n    ax.grid(axis='y', linestyle='--', alpha=0.7)\n\n    plt.tight_layout()\n    plt.savefig(\"figureswxw/urban_rural_ai_nonai_bar.png\", dpi=300,  bbox_inches='tight')\n    plt.show()\n\nelse:\n    print(\"Required columns are missing. Please check your dataset.\")\n\n\n\n\n\n\n\n\n\n2.7.2 Pie Chart\n\n\nCode\nimport matplotlib.pyplot as plt\n\nif {\"Urban_Rural\", \"IS_AI\"}.issubset(df1.columns):\n    pivot_urban = df1.groupby([\"Urban_Rural\", \"IS_AI\"]).size().unstack(fill_value=0)\n\n    fig, axes = plt.subplots(1, 2, figsize=(10, 6))  \n\n    for ax, region in zip(axes, [\"Urban\", \"Rural\"]):\n        data = pivot_urban.loc[region]\n        ax.pie(\n            data,\n            labels=data.index,\n            autopct='%1.1f%%',\n            startangle=90,\n            colors=[\"#ff9999\", \"#66b3ff\"],\n            wedgeprops={'edgecolor': 'black'}\n        )\n        ax.set_title(f\"{region} - AI vs Non-AI\")\n\n    plt.tight_layout()\n    plt.savefig(\"figureswxw/urban_rural_ai_nonai_pie_combined.png\", dpi=300,  bbox_inches='tight')\n    plt.show()\n\nelse:\n    print(\"Required columns are missing. Please check your dataset.\")\n\n\n\n\n\n\n\nThis part compares the distribution of AI and non-AI job postings between urban and rural regions. The stacked bar chart shows that rural areas account for a significantly higher total volume of job postings, with approximately 58,000 postings, compared to about 14,000 in urban regions. However, this difference in volume does not translate to a significant disparity in the share of AI roles.\nThe pie charts provide a more precise view of the proportion of AI jobs in each region. In urban areas, AI postings represent 3.9% of all job listings, while in rural areas, the share is 4.0%. Despite the substantial gap in absolute job counts, the proportion of AI-related positions is nearly identical between the two regions. This indicates that AI jobs are being adopted at a comparable rate, regardless of regional setting.\nThese findings suggest that while urban centres no longer hold a dominant lead in AI hiring volume, rural regions are not significantly lagging behind in AI adoption rate either. This aligns with recent research showing that AI-related opportunities are beginning to diffuse beyond traditional tech hubs, enabling more balanced geographic access to emerging roles (Hsu & Tambe (2024))."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This project explores the evolving landscape of the U.S. job market through the lens of geographic distribution and remote work trends. Leveraging Lightcast’s extensive job postings dataset, we analyze how employment patterns differ across regions, industries, and occupations, with a focus on:\n\nThe rise of AI-related job opportunities versus non-AI roles;\nRegional shifts in job availability and growth across states and metropolitan areas;\nThe impact and distribution of remote, hybrid, and onsite work models;\nEmerging career paths in both urban and rural labor markets.\n\nBy combining Exploratory Data Analysis (EDA), Spark SQL, Natural Language Processing (NLP), and Machine Learning (including PCA and clustering), our project aims to uncover hidden structures in job posting data and generate actionable insights for students, job seekers, and policymakers navigating the post-pandemic workforce.\nThis project was developed as part of AD688 Web Analytics and Big Data Tools at Boston University, integrating large-scale data processing and visualization techniques to inform real-world workforce decisions."
  },
  {
    "objectID": "about.html#ai-job-growth-which-cities-and-states-lead",
    "href": "about.html#ai-job-growth-which-cities-and-states-lead",
    "title": "About",
    "section": "3.1 AI Job Growth: Which Cities and States Lead?",
    "text": "3.1 AI Job Growth: Which Cities and States Lead?\n\nWhich cities or states have the highest job growth for AI vs. non-AI careers?\n\nThe job market for both AI and non-AI roles reveals a clear pattern of geographic concentration, particularly within a few dominant states and metropolitan areas. Texas stands out with the highest total number of job postings overall, driven primarily by non-AI roles, yet it still maintains a competitive presence in AI-related positions. California and New York also lead in AI job counts, underscoring their continued dominance in technology-driven employment. However, even in these leading states, AI roles comprise only a small fraction of total postings, reflecting the relatively slower expansion of AI-specific occupations compared to traditional roles.\nAt the city level, New York City, Chicago, and Austin emerge as top hubs for AI job volume. Among them, Austin is particularly noteworthy—it shows a strong presence of AI opportunities despite a moderate overall job count. This suggests a higher proportion of AI-related roles in the city, positioning it as a rising AI center. Overall, the data highlights that AI job growth is highly concentrated in coastal tech hubs and select mid-sized innovation cities, whereas non-AI jobs are more broadly distributed, especially in larger, diversified states like Texas and Ohio."
  },
  {
    "objectID": "about.html#remote-job-trends-increasing-or-decreasing",
    "href": "about.html#remote-job-trends-increasing-or-decreasing",
    "title": "About",
    "section": "3.2 Remote Job Trends: Increasing or Decreasing?",
    "text": "3.2 Remote Job Trends: Increasing or Decreasing?\n\nAre remote jobs increasing or decreasing across industries?\n\nDespite the growing visibility of remote work, current job market data reveals several inconsistencies and challenges in tracking remote job trends across industries. One of the major limitations lies in the inconsistency of remote job labeling—over 55,000 postings lack clear classification, significantly reducing the reliability of remote job trend analysis.\nAmong the positions that are clearly labeled, fully remote roles continue to dominate, especially in technical and knowledge-based sectors. This suggests a sustained demand for remote-friendly formats. However, hybrid and on-site roles may be underreported, raising concerns about data completeness and the accuracy of job type representation.\nThese findings indicate that while remote work remains an important part of the job landscape, its distribution is uneven and often underrepresented in data sources. Improving standardization in job labeling and expanding access to remote opportunities across a broader range of industries are critical next steps for workforce development."
  },
  {
    "objectID": "about.html#urban-vs.-rural-job-markets-for-ai",
    "href": "about.html#urban-vs.-rural-job-markets-for-ai",
    "title": "About",
    "section": "3.3 Urban vs. Rural Job Markets for AI",
    "text": "3.3 Urban vs. Rural Job Markets for AI\n\nHow do urban vs. rural job markets differ for AI and non-AI careers?\n\nThe primary distinction between urban and rural job markets lies in the volume of total job postings, rather than the relative share of AI jobs. As shown in the bar chart, rural areas post a significantly higher number of job openings overall, including both AI and non-AI roles. However, the proportion of AI jobs remains similar across regions—approximately 4% of total postings in both urban and rural areas, as reflected in the pie charts.\nThis minimal difference in AI job share indicates that AI-related opportunities are becoming geographically democratized. In other words, while urban areas traditionally dominate in tech hiring, rural regions are beginning to close the gap. The trend suggests that the urban AI advantage may be narrowing, possibly due to the rise of remote work, distributed teams, and increased access to digital infrastructure in rural communities (Manyika et al., 2019).\nThis insight implies that job seekers in rural areas may now access comparable AI-related opportunities without relocating, which has meaningful implications for workforce development and policy planning."
  },
  {
    "objectID": "about.html#are-tech-hubs-still-dominant",
    "href": "about.html#are-tech-hubs-still-dominant",
    "title": "About",
    "section": "3.4 Are Tech Hubs Still Dominant?",
    "text": "3.4 Are Tech Hubs Still Dominant?\n\nDo tech hubs (e.g., Silicon Valley, Austin, Boston) still dominate hiring, or are other locations emerging?\n\nFrom the city perspective, New York, Chicago, and Atlanta lead in job counts, each with over 1,500 jobs. Interestingly, none of these cities are considered tech hubs. Instead, most tech hub cities fall into the medium range, with job counts between 1,000 and 1,500.\nHowever, when viewed from a state-level perspective, tech hub cities in Silicon Valley stand out. A possible reason is that jobs in California are distributed across multiple cities. For example, San Francisco focuses on finance and AI, Los Angeles on media and entertainment, and San Jose on semiconductors. These cities still appear in the top 15 in terms of job count by city. Surprisingly, Boston does not have as many jobs as expected, whether viewed by city or by state. This may suggest that companies are relocating their headquarters to other cities such as Chicago and Atlanta.\nIn summary, jobs in cities like New York, Chicago, and Atlanta are more concentrated in specific urban areas, which makes them stand out in city-level job counts. However, at the state level, Silicon Valley remains a vibrant and prosperous region for job opportunities."
  }
]