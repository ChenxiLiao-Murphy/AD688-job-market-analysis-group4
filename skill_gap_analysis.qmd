---
title: "Skill Gap Analysis"
bibliography: references.bib
csl: csl/econometrica.csl
format: 
  html:
    toc: true
    number-sections: true
    df-print: paged
execute:
  echo: true
  eval: false
  code-fold: true
  freeze: auto
---


This section presents the skill gap analysis between job requirements and available workforce skills.



# Team score DataFrame

Team members' current skills relevant to their selected IT career pathï¼š


```{python}
#| echo: true
#| eval: false  
#| code-fold: true
#| results: hide

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
from collections import Counter
import re

```


```{python}

#| echo: true
#| eval: false  
#| code-fold: true
#| results: hide

df = pd.read_csv("data/lightcast_job_postings.csv", encoding="utf-8", on_bad_lines='skip')

```



```{python}

#| echo: true
#| eval: false  
#| code-fold: true
#| results: hide

skills_data = {
    "Name": ["Eugenia", "Chenxi", "Xiangwen"],
    "Python": [3, 3, 5],
    "SQL": [4, 2, 3],
    "Machine Learning": [1, 2, 4],
    "Cloud Computing": [3, 1, 2],
    "AWS": [2, 4, 3]
}

df_skills = pd.DataFrame(skills_data)
df_skills.set_index("Name", inplace=True)
df_skills


import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(8, 6))
sns.heatmap(df_skills, annot=True, cmap="coolwarm", linewidths=0.5)
plt.title("Team Skill Levels Heatmap")
plt.tight_layout()
plt.savefig("figurestyj/team_skill_heatmap.png", dpi=300,  bbox_inches='tight')
plt.show()
```


# Compare with top job market skills

```{python}
#| echo: true
#| eval: false  
#| code-fold: true
#| results: hide
#| fig-cap: "Team VS Industry Skills"
#| fig-align: center

from collections import Counter

top_skills = ["Python", "SQL", "Machine Learning", "Cloud Computing", "Docker", "AWS"]
job_skill_counts = Counter(top_skills)

for skill in top_skills:
    if skill not in df_skills.columns:
        df_skills[skill] = 0  # Assume no knowledge in missing skills

df_skills


import os
import matplotlib.pyplot as plt

os.makedirs("figureswxw", exist_ok=True)

team_avg_skills = df_skills.mean()

skills_to_plot = []
for skill in top_skills:
    score = team_avg_skills[skill] if skill in team_avg_skills else 0
    skills_to_plot.append(score)

plt.figure(figsize=(10, 5))
plt.bar(top_skills, skills_to_plot, color="skyblue")
plt.title("Average Team Skill Levels vs Top Skills")
plt.ylabel("Average Score")
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.savefig("figurestyj/team_vs_industry_skills.png", dpi=300,  bbox_inches='tight')
plt.show()
```


```{python}

#| echo: true
#| eval: false  
#| code-fold: true
#| results: hide

job_descriptions = df["BODY"].dropna().tolist()
all_text = " ".join(job_descriptions).lower()

skills_keywords = ["python", "sql", "machine learning", "cloud", "aws", "docker", "java", "excel", "r", "linux"]
skill_counts = Counter()
for skill in skills_keywords:
    matches = re.findall(rf"\b{re.escape(skill)}\b", all_text)
    skill_counts[skill] = len(matches)

top_skills = [skill for skill, count in skill_counts.most_common(5)]
```



```{python}



```



```{python}

```


```{python}

```



```{python}

```


```{python}

```