---
title: "Skill Gap Analysis"
bibliography: references.bib
csl: csl/apa.csl.csl
format: 
  html:
    toc: true
    number-sections: true
    df-print: paged
execute:
  echo: true
  eval: false
  code-fold: true
  freeze: auto
---


This section presents the skill gap analysis between job requirements and available workforce skills.



# Team score DataFrame

Evaluating the current skill levels of each team member in key technical areas relevant to IT and data analytics roles.

```{python}
#| echo: true
#| eval: false  
#| code-fold: true
#| results: hide

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
from collections import Counter
import re
import os

```


```{python}

#| echo: true
#| eval: false  
#| code-fold: true
#| results: hide

df = pd.read_csv("data/lightcast_job_postings.csv", encoding="utf-8", on_bad_lines='skip')

```

## Team Members' Current Skill Levels
```{python}

#| echo: true
#| eval: false  
#| code-fold: false
#| results: hide
skills_data = {
    "Name": ["Eugenia", "Chenxi", "Xiangwen"],
    "Python": [3, 3, 5],
    "SQL": [4, 2, 3],
    "Machine Learning": [1, 2, 4],
    "Cloud Computing": [3, 1, 2],
    "AWS": [2, 4, 3],
    "Docker": [2,2,2]
}


df_skills = pd.DataFrame(skills_data)
df_skills.set_index("Name", inplace=True)
df_skills

```


## Current Skill Heatmap
```{python}
#| echo: true
#| eval: false  
#| code-fold: true
#| results: hide
#| fig-align: center
#| fig-cap: "Team skill heatmap"

plt.figure(figsize=(10, 6))
sns.heatmap(df_skills, annot=True, cmap="coolwarm", linewidths=0.5)
plt.xlabel("Technical Skills", fontsize=14)       
plt.ylabel("Team Members", fontsize=14)   
plt.title("Team Skill Levels Heatmap")
plt.tight_layout()
plt.savefig("figurestyj/team_skill_heatmap.png", dpi=300,  bbox_inches='tight')
plt.show()
```

![](figurestyj/team_skill_heatmap.png){width=100% fig-align='center'}


## Personalized Upskilling Recommendations

To close the observed skill gaps, we provide the following individualized upskilling plans:

Eugenia is advised to focus on Machine Learning and AWS to better align with industry expectations.

Chenxi would benefit from strengthening her Cloud Computing and Python skills.

Xiangwen is recommended to enhance his proficiency in Docker and Cloud-related technologies.

These suggestions are based on both internal team comparisons and external job market demands, and they aim to improve overall team balance and job readiness.



# Compare with top job market skills
To identify potential skill gaps, we compare our teamâ€™s average skills with those most in demand across job descriptions.

## Compute Average Team Skills vs Industry Expectations
```{python}
#| echo: true
#| eval: false  
#| code-fold: true
#| results: hide
#| fig-cap: "Team VS Industry Skills"
#| fig-align: center


top_skills = ["Python", "SQL", "Machine Learning", "Cloud Computing", "Docker", "AWS"]
job_skill_counts = Counter(top_skills)

for skill in top_skills:
    if skill not in df_skills.columns:
        df_skills[skill] = 0  # Assume no knowledge in missing skills

df_skills


os.makedirs("figurestyj", exist_ok=True)

team_avg_skills = df_skills.mean()

skills_to_plot = []
for skill in top_skills:
    score = team_avg_skills[skill] if skill in team_avg_skills else 0
    skills_to_plot.append(score)

plt.figure(figsize=(10, 5))
plt.bar(top_skills, skills_to_plot, color="skyblue")
plt.title("Average Team Skill Levels vs Top Skills")
plt.xlabel("Technical Skills", fontsize=14)  
plt.ylabel("Average Score",fontsize=14 )
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.savefig("figurestyj/team_vs_industry_skills.png", dpi=300,  bbox_inches='tight')
plt.show()
```

![](figurestyj/team_vs_industry_skills.png){width=100% fig-align='center'}


# Extract Top In-Demand Skills from Job Descriptions
Examine the actual job postings to extract which skills are most frequently requested using keyword matching.
```{python}

#| echo: true
#| eval: false  
#| code-fold: true
#| results: hide

job_descriptions = df["BODY"].dropna().tolist()
all_text = " ".join(job_descriptions).lower()

skills_keywords = ["python", "sql", "machine learning", "cloud", "aws", "docker", "java", "excel", "r", "linux"]
skill_counts = Counter()
for skill in skills_keywords:
    matches = re.findall(rf"\b{re.escape(skill)}\b", all_text)
    skill_counts[skill] = len(matches)

top_skills = [skill for skill, count in skill_counts.most_common(5)]
```


# Visualize Top 5 Industry Skills
```{python}

#| echo: true
#| eval: false  
#| code-fold: true
#| results: hide
#| fig-cap: "Top 5 In-Demand Skills from Job Descriptions"
#| fig-align: center

top_skills_freq = skill_counts.most_common(5)
skills, counts = zip(*top_skills_freq)

plt.figure(figsize=(8, 5))
plt.bar(skills, counts, color=plt.cm.Blues(range(100, 100 + 40 * len(skills), 40)))
plt.title("Top 5 In-Demand Skills from Job Descriptions")
plt.xlabel("Skill")
plt.ylabel("Frequency")
plt.tight_layout()
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.savefig("figurestyj/top_5_in_demand_skills.png", dpi=300, bbox_inches='tight')
plt.show()

```

![](figurestyj/top_5_in_demand_skills.png){width=100% fig-align="center"}

